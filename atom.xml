<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>影月流光</title>
  
  <subtitle>疏影横斜水清浅</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-03T13:08:49.283Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>rivoc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>koa中间件</title>
    <link href="http://yoursite.com/2019/11/03/koa%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/11/03/koa中间件/</id>
    <published>2019-11-03T12:00:30.873Z</published>
    <updated>2019-11-03T13:08:49.283Z</updated>
    
    <content type="html"><![CDATA[<p>title: koa中间件<br>date: 2019-11-33 20:13:45<br>tags: koa<br>categories:</p><ul><li>nodeJS</li><li>koa<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 中间件就是匹配路由之前或者匹配路由之后做的一系列的操作</span><br><span class="line"></span><br><span class="line">- 中间件的功能包括：</span><br><span class="line">  执行任何代码。 修改请求和响应对象。 终结请求-响应循环。 调用堆栈中的下一个中间件。</span><br><span class="line">- 应用级中间件 路由级中间件 错误处理中间件 第三方中间件</span><br><span class="line">- 执行顺序：先从第一个中间件开始，通过调用next()将执行权交给下一个中间件，层层传递，直到最后一个中间件，接着匹配路由，然后回头，将执行权交给上一层中间件</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">这就像一个洋葱圈，从最外层开始处理中间件，全部处理完后还会回来走一趟，这就给了我们很大的操作空间</span><br><span class="line"></span><br><span class="line">![koa的中间件模型 洋葱形](https:<span class="regexp">//i</span>.loli.net/<span class="number">2019</span>/<span class="number">11</span>/<span class="number">03</span>/MgwuHloIWaxvkft.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**使用方法：**`<span class="javascript">app.use()</span>`注册中间件</span><br><span class="line"></span><br><span class="line">middleware的顺序很重要，也就是调用`<span class="javascript">app.use()</span>`的顺序决定了middleware的顺序</span><br><span class="line"></span><br><span class="line">next()用来调用下一个中间件，</span><br><span class="line"></span><br><span class="line">如果一个中间件没有调用`<span class="javascript">next()</span>`，会怎么办？后续的中间件将不再执行了</span><br><span class="line"></span><br><span class="line">```<span class="javascript">js</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span></span><br><span class="line"><span class="javascript">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'第一个中间件'</span>)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">await</span> next()</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">"回来执行第一个中间件"</span>)</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'第二个中间件'</span>)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">await</span> next()</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">"回来执行第二个中间件"</span>)</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'第三个中间件'</span>)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">await</span> next()</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'回来执行第三个中间件'</span>)</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">router.get(<span class="string">'/news'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  ctx.body = <span class="string">'匹配到/news路由'</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'匹配到/news路由'</span>)</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">app</span></span><br><span class="line"><span class="javascript">  .use(router.routes())</span></span><br><span class="line"><span class="javascript">  .use(router.allowedMethods());</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'starting at port 3000'</span>);</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//结果</span></span></span><br><span class="line"><span class="javascript">第一个中间件</span></span><br><span class="line"><span class="javascript">第二个中间件</span></span><br><span class="line"><span class="javascript">第三个中间件</span></span><br><span class="line"><span class="javascript">匹配到/news路由</span></span><br><span class="line"><span class="javascript">回来执行第三个中间件</span></span><br><span class="line"><span class="javascript">回来执行第二个中间件</span></span><br><span class="line"><span class="javascript">回来执行第一个中间件</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="用async语法写中间件"><a href="#用async语法写中间件" class="headerlink" title="用async语法写中间件"></a>用async语法写中间件</h3><p>我们知道 <code>async</code> 的执行机制是：只有当所有的 <code>await</code> 异步都执行完之后才能返回一个 <code>Promise</code>。所以当我们用 <code>async</code> 语法写中间件的时候，执行流程大致如下：</p><p>在有多个中间件的时候，先执行第一个中间件，遇见 <code>await next()</code> ，<code>await next()</code>后面的代码会被pending，继续执行第二个中间件， <code>await next()</code> 后面的代码被 pending，继续执行……直到最后一个中间件，匹配完路由，执行完，返回 Promise，接着倒数第二个中间件开始执行后续的代码并返回Promise，然后是倒数第三个中间件，接着一直以这种方式执行直到第一个中间件执行完，并返回 <code>Promise</code>，从而实现了洋葱图所示的中间件执行顺序</p><h3 id="静态资源中间件koa-static"><a href="#静态资源中间件koa-static" class="headerlink" title="静态资源中间件koa-static"></a>静态资源中间件koa-static</h3><p>当服务器内有一个文件夹，里面存放着一些静态资源，如图片、字体、文件、脚本等，通过在地址栏直接输入资源所在地址，是无法访问的，因为没有对应的路由，一个个写显然是不现实的。这就用到了<a href="https://www.npmjs.com/package/koa-static" target="_blank" rel="noopener">koa-static</a>。</p><p><code>koa-static</code>是一个非常轻量的<code>koa</code>中间件，能够迅速地搭建起一个静态文件服务器，通常我们把静态文件都放进public文件夹，通过<code>koa-static</code>的处理将<code>public</code>作为静态目录后，就能直接通过根路由进行访问静态文件了。</p><p>大致的实现是这样的：</p><ul><li>判断请求的文件是否存在，如果存在读取文件返回</li><li>如果请求的文件不存在，则查看当前文件夹下是否有指定的静态资源，如果存在返回当前文件夹下的指定的静态资源</li></ul><p>安装</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span> koa-<span class="keyword">static</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'koa-static'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> staticPath = <span class="string">'/static'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">static</span>(</span><br><span class="line">  path.join(__dirname, staticPath)</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">"hello world"</span></span><br><span class="line">  <span class="built_in">console</span>.log(path.join(__dirname, staticPath))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'starting at port 3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：把static配置为静态资源目录后，访问时不需要输入static,直接输入静态资源名就可<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: koa中间件&lt;br&gt;date: 2019-11-33 20:13:45&lt;br&gt;tags: koa&lt;br&gt;categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nodeJS&lt;/li&gt;
&lt;li&gt;koa&lt;figure class=&quot;highlight coffeescr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>koa路由</title>
    <link href="http://yoursite.com/2019/11/03/koa%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2019/11/03/koa路由/</id>
    <published>2019-11-03T11:44:25.508Z</published>
    <updated>2019-11-03T13:10:18.256Z</updated>
    
    <content type="html"><![CDATA[<p>title: koa路由<br>date: 2019-11-03 19:11:08<br>tags:</p><ul><li>node.js</li><li>koa<br>categories:</li><li>node.js</li><li>koa<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; 路由（Routing）是由一个URI（或者叫路径）和一个特定的HTTP 方法（GET、POST 等）组成的，涉及到应用如何响应客户端对某个网站节点的访问。</span><br><span class="line"></span><br><span class="line">通俗的讲：路由就是根据不同的URL 地址，加载不同的页面实现不同的功能。</span><br><span class="line"></span><br><span class="line">### 原生路由的实现</span><br><span class="line"></span><br><span class="line">实现思路：</span><br><span class="line"></span><br><span class="line"><span class="attribute">1.得到地址栏输入的路径</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">2.将路径传入某个方法，获取路径对应的html文件名</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">3.读取html文件并返回</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">3.将html文件返回给浏览器</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">```js</span></span><br><span class="line">const Koa = require('koa');</span><br><span class="line">const fs = require('fs');</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">app.use(async(ctx)=&gt;&#123;</span><br><span class="line">    let url = ctx.request.url;</span><br><span class="line">    let html = await route(url);</span><br><span class="line">    </span><br><span class="line">    ctx.body=html;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="attribute">app.listen(3000);</span></span><br><span class="line">console.log('starting at 3000');</span><br><span class="line"></span><br><span class="line">async function route(url)&#123;</span><br><span class="line">    let page = '404.html';</span><br><span class="line">    <span class="attribute">switch(url)&#123;</span></span><br><span class="line">        case '/':</span><br><span class="line">            page ='index.html';</span><br><span class="line">            <span class="attribute">break;</span></span><br><span class="line">        case '/index':</span><br><span class="line">            page ='index.html';</span><br><span class="line">            <span class="attribute">break;</span></span><br><span class="line">        case '/todo':</span><br><span class="line">            page = 'todo.html';</span><br><span class="line">            <span class="attribute">break;</span></span><br><span class="line">        case '/404':</span><br><span class="line">            page = '404.html';</span><br><span class="line">            <span class="attribute">break;</span></span><br><span class="line">        default:</span><br><span class="line">            break; </span><br><span class="line">    &#125;</span><br><span class="line">    let html = await render(page);</span><br><span class="line">    return html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function render(page)&#123;</span><br><span class="line">    //读取的时候可能会卡死，必须要异步处理</span><br><span class="line">        return  new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">            let pageUrl = `./$&#123;page&#125;`;</span><br><span class="line">            fs.readFile(pageUrl,"binary",(err,data)=&gt;&#123;</span><br><span class="line">                <span class="attribute">if(err)&#123;</span></span><br><span class="line">                    reject(err)</span><br><span class="line">                &#125;else&#123;          </span><br><span class="line">                    <span class="attribute">resolve(data);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="koa-router中间件"><a href="#koa-router中间件" class="headerlink" title="koa-router中间件"></a>koa-router中间件</h3><h4 id="安装koa-router中间件"><a href="#安装koa-router中间件" class="headerlink" title="安装koa-router中间件"></a>安装koa-router中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save koa-router</span><br></pre></td></tr></table></figure><h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line">router</span><br><span class="line">  .get(<span class="string">'/'</span>, (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">"hello page"</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .get(<span class="string">'/todo'</span>, (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">"todo page "</span>;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注册路由</span></span><br><span class="line"><span class="comment">//allowedMethods 在所有的路由中间件最后调用，根据此时的ctx设置响应头</span></span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'starting at port 3000'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="配置路由层级"><a href="#配置路由层级" class="headerlink" title="配置路由层级"></a>配置路由层级</h4><h5 id="前缀router-prefix"><a href="#前缀router-prefix" class="headerlink" title="前缀router.prefix"></a>前缀router.prefix</h5><p>全局配置，对某一个router下的所有路径增加前缀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="comment">// const router = require('koa-router')()</span></span><br><span class="line"><span class="comment">//router.prefix('/pre')</span></span><br><span class="line"><span class="comment">//这两行代码等同下面的一行代码</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(</span><br><span class="line">  &#123; <span class="attr">prefix</span>: <span class="string">'/pre'</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="router-use"><a href="#router-use" class="headerlink" title="router.use"></a>router.use</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义子路由</span></span><br><span class="line"><span class="keyword">let</span> home = <span class="keyword">new</span> Router()</span><br><span class="line">home</span><br><span class="line">  .get(<span class="string">'/todo'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">"home todo"</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .get(<span class="string">'/list'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">"home list"</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> page = <span class="keyword">new</span> Router()</span><br><span class="line">page</span><br><span class="line">  .get(<span class="string">'/todo'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">"page todo"</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .get(<span class="string">'/list'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">"page list"</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">//根路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"><span class="comment">//根路由上注册子路由</span></span><br><span class="line">router.use(<span class="string">'/home'</span>, home.routes(), home.allowedMethods())</span><br><span class="line">router.use(<span class="string">'/page'</span>, page.routes(), page.allowedMethods())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注册根路由</span></span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'starting at port 3000'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以传入多个动态参数</span></span><br><span class="line">router.get(<span class="string">'/newsdetail/:id/:cid'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  id = ctx.params.id</span><br><span class="line">  cid = ctx.params.cid</span><br><span class="line">  ctx.body(<span class="string">`id:<span class="subst">$&#123;id&#125;</span>cid:<span class="subst">$&#123;cid&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: koa路由&lt;br&gt;date: 2019-11-03 19:11:08&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li&gt;koa&lt;br&gt;categories:&lt;/li&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li&gt;koa&lt;figure 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>koa2中使用cookie</title>
    <link href="http://yoursite.com/2019/11/03/koa2%E4%B8%AD%E4%BD%BF%E7%94%A8cookie/"/>
    <id>http://yoursite.com/2019/11/03/koa2中使用cookie/</id>
    <published>2019-11-03T08:50:31.971Z</published>
    <updated>2019-11-03T13:09:15.175Z</updated>
    
    <content type="html"><![CDATA[<p>title: koa 读写 cookie<br>date: 2019-11-03 19:14:08<br>tags:</p><ul><li>node.js</li><li>koa<br>categories:</li><li>node.js</li><li>koa</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 写：ctx.cookies.<span class="keyword">set</span> (name，value，参数<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">name是一个唯一确定的cookie名称，不区分大小写，参数<span class="number">3</span>是cookie的配置项</span><br><span class="line"></span><br><span class="line">配置选项：</span><br><span class="line"></span><br><span class="line">- domain:默认值是创建cookie的网页所在服务器的域名，表示cookie对于哪个域是有效的</span><br><span class="line">- path:cookie影响到的路径，浏览器跟会根据这项配置，像指定域中匹配的路径发送cookie</span><br><span class="line">- maxAge:cookie的最大有效时长，不是一个固定的时间点，优先级高于expires</span><br><span class="line">- expires:cookie失效时间，表示cookie何时应该被删除，不设置此项浏览器会在页面关闭时删除所有cookie，当客户端与服务端时间不一致，会产生偏差</span><br><span class="line">- httpOnly:是否只能用http请求获得</span><br><span class="line">- overwrite:是否允许重写</span><br><span class="line"></span><br><span class="line">### 读：ctx.cookies.<span class="keyword">get</span>(name)</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line"><span class="keyword">const</span> Koa  = require(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span>(ctx)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(ctx.url=== <span class="string">'/index'</span>)&#123;</span><br><span class="line">        ctx.cookies.<span class="keyword">set</span>(</span><br><span class="line">            <span class="string">'MyName'</span>,<span class="string">'xxx'</span>,&#123;</span><br><span class="line">                domain:<span class="string">'127.0.0.1'</span>, <span class="comment">// 写cookie所在的域名</span></span><br><span class="line">                path:<span class="string">'/index'</span>,       <span class="comment">// 写cookie所在的路径</span></span><br><span class="line">                maxAge:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>,   <span class="comment">// cookie有效时长</span></span><br><span class="line">                expires:<span class="keyword">new</span> Date(<span class="string">'2018-12-31'</span>), <span class="comment">// cookie失效时间</span></span><br><span class="line">                httpOnly:<span class="keyword">false</span>,  <span class="comment">// 是否只用于http请求中获取</span></span><br><span class="line">                overwrite:<span class="keyword">false</span>  <span class="comment">// 是否允许重写</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        ctx.body = <span class="string">'cookie is ok'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( ctx.cookies.<span class="keyword">get</span>(<span class="string">'MyName'</span>))&#123;</span><br><span class="line">            ctx.body = ctx.cookies.<span class="keyword">get</span>(<span class="string">'MyName'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ctx.body = <span class="string">'Cookie is none'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">    console.log(<span class="string">'[demo] server is starting at port 3000'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: koa 读写 cookie&lt;br&gt;date: 2019-11-03 19:14:08&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li&gt;koa&lt;br&gt;categories:&lt;/li&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li&gt;koa
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>koa获取get、post请求参数</title>
    <link href="http://yoursite.com/2019/11/02/koa%E8%8E%B7%E5%8F%96get%E3%80%81post%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2019/11/02/koa获取get、post请求参数/</id>
    <published>2019-11-02T15:47:24.620Z</published>
    <updated>2019-11-03T13:09:43.549Z</updated>
    
    <content type="html"><![CDATA[<p>title: koa获取get、post请求参数<br>date: 2019-11-03 19:12:08<br>tags:</p><ul><li>node.js</li><li>koa<br>categories:</li><li>node.js</li><li>koa<figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## ctx对象的一些简写方法</span></span><br><span class="line"></span><br><span class="line">`ctx.body = ctx.res.body = ctx.response.body`</span><br><span class="line"></span><br><span class="line">`ctx.url=ctx.request.url`</span><br><span class="line"></span><br><span class="line">`ctx.type=ctx.response.type`</span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取get请求参数</span></span><br><span class="line"></span><br><span class="line">通过request接收，获取方式有两种，query和querystring</span><br><span class="line"></span><br><span class="line">query:返回格式化的参数对象</span><br><span class="line"></span><br><span class="line">querystring:返回请求字符串</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="keyword">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="keyword">require</span>(<span class="string">'koa-router'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"><span class="comment">//ctx context（上下文）,包含了request和response信息</span></span><br><span class="line">router.get(<span class="string">'/newslist'</span>, async (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> url = ctx.url</span><br><span class="line">  <span class="comment">//直接通过ctx获取</span></span><br><span class="line">  <span class="keyword">let</span> ctx_query = ctx.query</span><br><span class="line">  <span class="keyword">let</span> ctx_querystring = ctx.querystring</span><br><span class="line">  <span class="comment">//通过ctx.request获取</span></span><br><span class="line">  <span class="keyword">let</span> request = ctx.request</span><br><span class="line">  <span class="keyword">let</span> req_query = request.query</span><br><span class="line">  <span class="keyword">let</span> req_querystring = request.querystring</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    url,</span><br><span class="line">    ctx_query,</span><br><span class="line">    ctx_querystring,</span><br><span class="line">    req_query,</span><br><span class="line">    req_querystring</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">  .<span class="keyword">use</span>(router.routes())</span><br><span class="line">  .<span class="keyword">use</span>(router.allowedMethods());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  console.log(<span class="string">'starting at port 3000'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>在地址栏输入<a href="http://localhost:3000/newslist/?user=%E5%BC%A0%E4%B8%89&amp;age=18" target="_blank" rel="noopener">http://localhost:3000/newslist/?user=%E5%BC%A0%E4%B8%89&amp;age=18</a></p><p><img src="https://i.loli.net/2019/11/03/92xyeLgG7YdvtkS.png" alt="执行结果"></p><h2 id="获取post请求参数"><a href="#获取post请求参数" class="headerlink" title="获取post请求参数"></a>获取post请求参数</h2><p>对于post请求，koa2没有封装方便的方法获取参数，需要自行分几步获取</p><p><strong>步骤：</strong></p><ol><li>解析上下文ctx中的原生nodex.js对象req。</li><li>将POST表单数据解析成query string-字符串.(例如:user=aaa&amp;age=18)</li><li>将字符串转换成JSON格式。</li></ol><p><strong>ctx.request和ctx.req的区别</strong></p><ul><li>ctx.request:是Koa2中context经过封装的请求对象，它用起来更直观和简单。</li><li>ctx.req:是context提供的node.js原生HTTP请求对象。这个虽然不那么直观，但是可以得到更多的内容，适合我们深度编程。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (ctx.url === <span class="string">'/'</span> &amp;&amp; ctx.method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;请填写表单数据&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;form action="/" method="POST"&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;用户名 &lt;input type="text" name="username"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt; 密码 &lt;input type="password" name="password"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">   &lt;div&gt;&lt;button type="submit"&gt;提交&lt;/button&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    ctx.body = html</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ctx.url === <span class="string">'/'</span> &amp;&amp; ctx.method === <span class="string">"POST"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> parsePostData(ctx)</span><br><span class="line">    ctx.body = data</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.body = <span class="string">'&lt;h1&gt;404!&lt;/h1&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parsePostData</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> postdata = <span class="string">""</span>;</span><br><span class="line">      <span class="comment">//nodejs用req.on(data)接收客户端的数据</span></span><br><span class="line">      ctx.req.on(<span class="string">'data'</span>, (data) =&gt; &#123;</span><br><span class="line">        postdata += data</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">//请求结束开始解析</span></span><br><span class="line">      ctx.req.addListener(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> parseData = parseQueryStr(postdata)</span><br><span class="line">        resolve(parseData);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseQueryStr</span> (<span class="params">queryStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> queryData = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> queryStrList = queryStr.split(<span class="string">'&amp;'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(queryStrList);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [index, queryStr] <span class="keyword">of</span> queryStrList.entries()) &#123;</span><br><span class="line">    <span class="keyword">let</span> itemList = queryStr.split(<span class="string">'='</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(itemList);</span><br><span class="line">    queryData[itemList[<span class="number">0</span>]] = <span class="built_in">decodeURIComponent</span>(itemList[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> queryData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'starting at port 3000'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="koa-bodyparser中间件"><a href="#koa-bodyparser中间件" class="headerlink" title="koa-bodyparser中间件"></a>koa-bodyparser中间件</h2><p>koa-bodyparser中间件将koa2上下文的formData数据解析到ctx.request.body中，简化了获取步骤</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save koa-bodyparser</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ctx.url===<span class="string">'/'</span> &amp;&amp; ctx.method===<span class="string">'POST'</span>)&#123;</span><br><span class="line">         <span class="keyword">let</span> postData= ctx.request.body;</span><br><span class="line">         ctx.body=postData;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: koa获取get、post请求参数&lt;br&gt;date: 2019-11-03 19:12:08&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li&gt;koa&lt;br&gt;categories:&lt;/li&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>nodemailer模块</title>
    <link href="http://yoursite.com/2019/10/31/nodemailer%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2019/10/31/nodemailer模块/</id>
    <published>2019-10-31T15:23:53.855Z</published>
    <updated>2019-10-31T15:23:53.908Z</updated>
    
    <content type="html"><![CDATA[<p>第三方模块nodemailer用于发邮件</p><p>引入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> nodemailer</span><br></pre></td></tr></table></figure><p>邮箱验证码和手机验证码的逻辑基本一致，</p><p>往邮箱里发验证码目前是免费的</p><p>复制示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">'nodemailer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// async..await is not allowed in global scope, must use a wrapper</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Generate test SMTP service account from ethereal.email</span></span><br><span class="line">    <span class="comment">// Only needed if you don't have a real mail account for testing</span></span><br><span class="line">    <span class="keyword">let</span> testAccount = <span class="keyword">await</span> nodemailer.createTestAccount();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建发送邮件的对象</span></span><br><span class="line">    <span class="keyword">let</span> transporter = nodemailer.createTransport(&#123;</span><br><span class="line">        host: <span class="string">'smtp.qq.com'</span>,<span class="comment">//发送方邮箱（例如qq) 通过模块文件夹下的lib/wellknown/services.json更改邮箱映射的域名</span></span><br><span class="line">        port: <span class="number">587</span>,<span class="comment">//端口号</span></span><br><span class="line">        secure: <span class="literal">false</span>, <span class="comment">// true for 465, false for other ports</span></span><br><span class="line">        auth: &#123;</span><br><span class="line">            user: testAccount.user, <span class="comment">// 发送方的邮箱地址</span></span><br><span class="line">            pass: testAccount.pass <span class="comment">// mtp验证码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// send mail with defined transport object</span></span><br><span class="line">    <span class="keyword">let</span> info = <span class="keyword">await</span> transporter.sendMail(&#123;</span><br><span class="line">        <span class="keyword">from</span>: <span class="string">'"Fred Foo 👻" &lt;foo@example.com&gt;'</span>, <span class="comment">// sender address</span></span><br><span class="line">        to: <span class="string">'bar@example.com, baz@example.com'</span>, <span class="comment">// list of receivers</span></span><br><span class="line">        subject: <span class="string">'Hello ✔'</span>, <span class="comment">// Subject line</span></span><br><span class="line">        text: <span class="string">'Hello world?'</span>, <span class="comment">// plain text body text,html二选一</span></span><br><span class="line">        html: <span class="string">'&lt;b&gt;Hello world?&lt;/b&gt;'</span> <span class="comment">// html body</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Message sent: %s'</span>, info.messageId);</span><br><span class="line">    <span class="comment">// Message sent: &lt;b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Preview only available when sending through an Ethereal account</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Preview URL: %s'</span>, nodemailer.getTestMessageUrl(info));</span><br><span class="line">    <span class="comment">// Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main().catch(<span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure><p>nodemailer lib wellko service,json</p><p><img src="C:%5CUsers%5CRivoc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1572006982656.png" alt="1572006982656"></p><p>邮箱设置 开启pop3/smtp服务</p><p><img src="C:%5CUsers%5CRivoc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1572009085588.png" alt="1572009085588"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第三方模块nodemailer用于发邮件&lt;/p&gt;
&lt;p&gt;引入&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>mongoDB的安装</title>
    <link href="http://yoursite.com/2019/10/31/mongoDB%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/10/31/mongoDB的安装/</id>
    <published>2019-10-31T15:23:47.168Z</published>
    <updated>2019-10-31T15:23:47.227Z</updated>
    
    <content type="html"><![CDATA[<p>启动mongoDB</p><p>进入</p><p>c/data/db/bin</p><p>命令行mongod</p><p>连接数据库</p><p>再开一个窗口</p><p>show dbs</p><p>环境变量</p><p>Mongodb的安装路径到bin目录，复制地址栏的路径，加到环境变量PATH中</p><p>mongod命令行启动数据库指令</p><p>mongo 命令行操作数据库指令</p><p>mongoose node操作数据库</p><p>mongoDB的可视化工具</p><p>Robo 3T</p><p>验证码接口逻辑</p><p>用户输入数据</p><p>如果是手机号，就可以点击获取验证码，前端按钮变成60s倒计时，</p><p>1.验证用户名存在</p><p>邮箱验证码接口</p><p>发送邮件</p><p>邮箱和验证码保存到内存中  声明一个全局变量store={email:;code:;}</p><p>2.生成验证码，保存（redis,数据库）</p><p>五分钟之内不能重新发送{email:{code:;ctime:;}</p><p>ctime是第一次发送时间的时间戳，每次发送对比一下当前时间和时间戳的差值，如果小于五分钟就不发</p><p>utils</p><p>-mail.js</p><p>封装一个邮箱模块</p><p>Mail.send(邮箱地址,验证码)</p><p><img src="C:%5CUsers%5CRivoc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1572006689160.png" alt="1572006689160"></p><p><img src="C:%5CUsers%5CRivoc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1572006364892.png" alt="1572006364892"></p><p><img src="C:%5CUsers%5CRivoc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1572006426964.png" alt="1572006426964"></p><p><img src="C:%5CUsers%5CRivoc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1572006564358.png" alt="1572006564358"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;启动mongoDB&lt;/p&gt;
&lt;p&gt;进入&lt;/p&gt;
&lt;p&gt;c/data/db/bin&lt;/p&gt;
&lt;p&gt;命令行mongod&lt;/p&gt;
&lt;p&gt;连接数据库&lt;/p&gt;
&lt;p&gt;再开一个窗口&lt;/p&gt;
&lt;p&gt;show dbs&lt;/p&gt;
&lt;p&gt;环境变量&lt;/p&gt;
&lt;p&gt;Mongodb的安装路径到bin目
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>实现一个 jQuery 的 API</title>
    <link href="http://yoursite.com/2019/10/31/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%20jQuery%20%E7%9A%84%20API/"/>
    <id>http://yoursite.com/2019/10/31/实现一个 jQuery 的 API/</id>
    <published>2019-10-31T04:48:42.122Z</published>
    <updated>2019-08-27T10:35:38.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现一个-jQuery-的-API"><a href="#实现一个-jQuery-的-API" class="headerlink" title="实现一个 jQuery 的 API"></a>实现一个 jQuery 的 API</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="variable">$div</span> = $(<span class="string">'div'</span>)</span><br><span class="line"><span class="variable">$div</span>.addClass(<span class="string">'red'</span>) <span class="comment">// 可将所有 div 的 class 添加一个 red</span></span><br><span class="line"><span class="variable">$div</span>.setText(<span class="string">'hi'</span>) <span class="comment">// 可将所有 div 的 textContent 变为 hi</span></span><br></pre></td></tr></table></figure><p>1.先搭出总体结构,对传入参数进行类型判断，无论传入的是选择器还是node节点，都返回一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodesOrSelector</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> nodes = &#123;&#125;;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> nodesOrSelector===<span class="string">'string'</span>)&#123;<span class="comment">//如果传入的是选择器</span></span><br><span class="line">          nodes=<span class="built_in">document</span>.querySelectorAll(nodeOrSelector);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>((nodesOrSelector <span class="keyword">instanceof</span> Node))&#123;<span class="comment">//如果传入的是node节点</span></span><br><span class="line">          nodes=&#123;<span class="string">'0'</span>:nodesOrSelector,<span class="string">'length'</span>:<span class="number">1</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">classes</span>) </span>&#123;&#125;;</span><br><span class="line">      nodes.setText = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;&#125;;</span><br><span class="line">      <span class="keyword">return</span> nodes</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="built_in">window</span>.$ = jQuery;</span><br></pre></td></tr></table></figure><p>2.两个功能的实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodesOrSelector</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> nodes = &#123;&#125;;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> nodesOrSelector === <span class="string">"string"</span>) &#123;</span><br><span class="line">       <span class="comment">//如果传入的是选择器</span></span><br><span class="line">       nodes = <span class="built_in">document</span>.querySelectorAll(nodesOrSelector);</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodesOrSelector <span class="keyword">instanceof</span> Node) &#123;</span><br><span class="line">       <span class="comment">//如果传入的是node节点</span></span><br><span class="line">       nodes = &#123; <span class="string">'0'</span>: nodesOrSelector, <span class="string">'length'</span>: <span class="number">1</span> &#125;;</span><br><span class="line">     &#125;</span><br><span class="line">     nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">classes</span>) </span>&#123;</span><br><span class="line">       <span class="comment">//两层循环，外层遍历node，每次遍历给node添加所有的class，所以加一个内循环，遍历class</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">         classes.forEach(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">           nodes[i].classList.add(value);</span><br><span class="line">         &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     nodes.setText = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">         nodes[i].textContent = text;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">return</span> nodes;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">      width: 50px;</span><br><span class="line">      height: 30px;</span><br><span class="line">      margin-bottom: 10px;</span><br><span class="line">      background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">      background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodesOrSelector</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> nodes = &#123;&#125;;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">typeof</span> nodesOrSelector === <span class="string">"string"</span>) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//如果传入的是选择器</span></span></span><br><span class="line"><span class="javascript">        nodes = <span class="built_in">document</span>.querySelectorAll(nodesOrSelector);</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodesOrSelector <span class="keyword">instanceof</span> Node) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//如果传入的是node节点</span></span></span><br><span class="line">        nodes = &#123; 0: nodesOrSelector, length: 1 &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      nodes.addClass = <span class="function"><span class="keyword">function</span><span class="params">(classes)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//两层循环，外层遍历node，每次遍历给node添加所有的class，所以加一个内循环，遍历class</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">          classes.forEach(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line">            nodes[i].classList.add(value);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      nodes.setText = <span class="function"><span class="keyword">function</span><span class="params">(text)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span></span><br><span class="line">          nodes[i].textContent = text;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> nodes;</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.$ = jQuery;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $div = $(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="actionscript">    $div.addClass([<span class="string">"red"</span>]);</span></span><br><span class="line"><span class="actionscript">    $div.setText(<span class="string">"hi"</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实现一个-jQuery-的-API&quot;&gt;&lt;a href=&quot;#实现一个-jQuery-的-API&quot; class=&quot;headerlink&quot; title=&quot;实现一个 jQuery 的 API&quot;&gt;&lt;/a&gt;实现一个 jQuery 的 API&lt;/h1&gt;&lt;figure class
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>express</title>
    <link href="http://yoursite.com/2019/10/25/express/"/>
    <id>http://yoursite.com/2019/10/25/express/</id>
    <published>2019-10-25T07:34:35.745Z</published>
    <updated>2019-10-25T15:36:59.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="express"><a href="#express" class="headerlink" title="express"></a>express</h1><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="built_in">express</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure><p>第三方模块的引用是从先当前目录的node_modules里查找（如果有的话），没有则逐级向上</p><h2 id="开启服务器"><a href="#开启服务器" class="headerlink" title="开启服务器"></a>开启服务器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个接口</span></span><br><span class="line">    app.get(<span class="string">'/user/login'</span>, (req, res) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(req.query)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'你好'</span>)</span><br><span class="line">      res.send(&#123; <span class="attr">err</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">'okok'</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'server start'</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>服务器软件（node、tomcat、iis、ngnix)</p><p>在外网，ip确定服务器主机的位置，port确定服务器里某一个程序</p><p>接口测试工具postman</p><p><img src="C:%5CUsers%5CRivoc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571990949051.png" alt="1571990949051"></p><h2 id="api接口的书写"><a href="#api接口的书写" class="headerlink" title="api接口的书写"></a>api接口的书写</h2><p>提取请求信息</p><ul><li>get方法请求的参数用req.query提取</li><li>post方法请求的参数用req.body提取，但要用到插件，例如body-parser解析（支持解析下面1,3）因为post提交的数据格式有4种<ul><li>application/www-form-ulrencoded（默认）</li><li>multipart/form-data</li><li>application/json</li><li>text/xml</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multipart = <span class="built_in">require</span>(<span class="string">'connect-multiparty'</span>)</span><br><span class="line">   <span class="keyword">const</span> multipartMiddleware = multipart()</span><br><span class="line">   app.post(<span class="string">'/formdata'</span>, multipartMiddleware, (req, res) =&gt; &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(req.body)</span><br><span class="line">     res.send(<span class="string">'post successfully!'</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line">   <span class="comment">//使用中间件解析表单数据</span></span><br><span class="line">   app.use(bodyparser, urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">   <span class="comment">//解析json数据</span></span><br><span class="line">   app.use(bodyparser.json())</span><br><span class="line">   app.post(<span class="string">'/user/reg'</span>, (req, res) =&gt; &#123;</span><br><span class="line">     <span class="keyword">let</span> &#123; us, ps &#125; = req.body</span><br><span class="line">     <span class="built_in">console</span>.log(req.body)</span><br><span class="line">     <span class="keyword">if</span> (us === <span class="number">123</span> &amp;&amp; ps === <span class="number">123</span>) &#123;</span><br><span class="line">       res.send(&#123; <span class="attr">err</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">'ok'</span> &#125;)</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       res.send(&#123; <span class="attr">err</span>: <span class="number">-1</span>, <span class="attr">msg</span>: <span class="string">'nook'</span> &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件 middlewear</p><ul><li>内置中间件 static</li><li>自定义中间件</li><li>第三方中间件</li></ul><p>为了防止有人刷api,约定前端每次请求api都要带一个token，后端在接收到请求后，判断请求里是否携带token，携带token则允许请求</p><p>每一个接口处理请求时都要使用到这种验证方法，可以用中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义中间件（全局）</span></span><br><span class="line"><span class="comment">//next是否继续往下执行,一定要写</span></span><br><span class="line">app.use(<span class="string">'/'</span>,(req,res,next)=&gt;&#123;</span><br><span class="line"><span class="keyword">let</span> token=req.query</span><br><span class="line"><span class="keyword">if</span>(token)&#123;</span><br><span class="line">next()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">res.send(<span class="string">'缺少token'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//等价写法，第一个参数（路径）默认为根路径，可以省略</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,nex</span>)=&gt;</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>中间件可以理解为一个拦截器,在回调函数之前先处理中间件</p><p>局部中间件</p><p>可以写无数个，只要在合适的地方next()就可以一个个执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/test1'</span>,(req,res,next)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">(req,res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>内置中间件static </p><p>指定一个目录，该目录下的静态资源可以被外部访问（静态文件托管）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//__dirname指向当前文件所在的绝对路径（从磁盘根目录开始）</span></span><br><span class="line"><span class="comment">//内置路径模块path，用来处理路径,这里用来拼接静态路径</span></span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="comment">//以下写法通过域名 端口号 指定目录里的文件名称（注意路径不包括指定的目录名）就可以访问到静态资源</span></span><br><span class="line">app.use(express.static(path.join(__dirname,<span class="string">'./xxx'</span>)))</span><br><span class="line"><span class="comment">//以下写法通过域名 端口号 public/指定目录里的文件名称</span></span><br><span class="line">app.use(<span class="string">'/public'</span>,express.static(path.join(__dirname,<span class="string">'./xxx'</span>)))</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>路由拆分，将不同功能的路由拆分变成单独的文件，作为模块暴露出去统一放到router文件夹下</p><p>访问localhost:3000/user/add</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跟用户有关的路由userRouter</span></span><br><span class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> router=express.Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/add'</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">res.send(<span class="string">'user add'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/del'</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">res.send(<span class="string">'del add'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=router</span><br></pre></td></tr></table></figure><p>server.js（入口文件）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"><span class="keyword">let</span> userRouter=<span class="built_in">require</span>(<span class="string">'./router/userRouter'</span>)</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/user'</span>,userRouter)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server start'</span>)&#125;)</span><br></pre></td></tr></table></figure><p>nodemon</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;express&quot;&gt;&lt;a href=&quot;#express&quot; class=&quot;headerlink&quot; title=&quot;express&quot;&gt;&lt;/a&gt;express&lt;/h1&gt;&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>mongoose实现数据的增删改查</title>
    <link href="http://yoursite.com/2019/10/25/mongoose%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://yoursite.com/2019/10/25/mongoose实现数据的增删改查/</id>
    <published>2019-10-25T05:06:40.696Z</published>
    <updated>2019-10-25T11:47:55.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入mongoose"><a href="#引入mongoose" class="headerlink" title="引入mongoose"></a>引入mongoose</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose=require(<span class="string">'mongoose'</span>)]()</span><br><span class="line"><span class="comment">//默认情况</span></span><br><span class="line">mongoose.<span class="built_in">connect</span>(<span class="string">'mongodb://localhost:27017/数据库名称'</span>,&#123;useNewUrlParser:true&#125;)</span><br><span class="line"><span class="comment">//有账户密码的情况</span></span><br><span class="line"></span><br><span class="line">mongoose.<span class="built_in">connect</span>(<span class="string">'mongodb://'</span>)</span><br></pre></td></tr></table></figure><h2 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h2><p>Schema为数据库对象的集合，每个Schema会映射到mongodb中的一个collection，可以理解为表结构的定义，不具备操作数据库的能力</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Schema=mongoose.Schema(&#123;</span><br><span class="line">    name:<span class="built_in">String</span>,</span><br><span class="line">    age:<span class="built_in">Number</span>,</span><br><span class="line">    status:<span class="string">'number'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>Model即数据模型，是由schema生成的，可以对数据库进行操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成Model</span></span><br><span class="line">mongoose.model(模型名称（首字母大写),Schema)</span><br><span class="line"><span class="comment">//例如生成一个博客帖子模型</span></span><br><span class="line"><span class="comment">//注意：因为第一个参数就是集合的名称，所以当参数为单数时，也会自动转为复数</span></span><br><span class="line"><span class="keyword">const</span> Post=mongoose.model(<span class="string">'Post'</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">title:&#123;<span class="keyword">type</span>:<span class="built_in">String</span>&#125;,</span><br><span class="line">body:&#123;<span class="keyword">type</span>:<span class="built_in">String</span>&#125;</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">//查询数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">await</span> Post.insertMany([</span><br><span class="line">    &#123;title:<span class="string">'第一篇帖子'</span>，body:<span class="string">'内容1'</span>&#125;,</span><br><span class="line">    &#123;title:<span class="string">'第二篇帖子'</span>，body:<span class="string">'内容2'</span>&#125;</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> posts=<span class="keyword">await</span> Post.find()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置关联"><a href="#设置关联" class="headerlink" title="设置关联"></a>设置关联</h2><p>在schema里再新增一个字段category，插入的数据里也写上category，</p><p>数据同步的问题，当要修改分类名称时，需要一个个修改，更合理的方式将分类放在另一个模型，帖子与另分类进行关联，一旦修改分类，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Category=mongoose.model(<span class="string">'Category'</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">name:&#123;<span class="keyword">type</span>:<span class="built_in">String</span>&#125;</span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">const</span> Post=mongoose.model(<span class="string">'Post'</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">title:&#123;<span class="keyword">type</span>:<span class="built_in">String</span>&#125;,</span><br><span class="line">body:&#123;<span class="keyword">type</span>:<span class="built_in">String</span>&#125;,</span><br><span class="line">category:&#123;<span class="keyword">type</span>:mongoose.SchemaTypes.objectId,ref:<span class="string">'Category'</span>&#125;</span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">await</span> Post.insertMany([</span><br><span class="line">        &#123; title: <span class="string">'第一篇帖子'</span>, body: <span class="string">'内容1'</span> &#125;,</span><br><span class="line">        &#123; title: <span class="string">'第二篇帖子'</span>, body: <span class="string">'内容2'</span> &#125;</span><br><span class="line">      ])</span><br><span class="line">      <span class="comment">//设置分类</span></span><br><span class="line">      <span class="keyword">await</span> Category.insertMany([&#123; name: <span class="string">'nodeJs'</span> &#125;, &#123; name: <span class="string">'vuejs'</span> &#125;])</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">const</span> cat1 = Category.findOne(&#123; name: <span class="string">'nodeJs'</span> &#125;)</span><br><span class="line">      <span class="keyword">const</span> post1 = <span class="keyword">await</span> Post.findOne(&#123; title: <span class="string">'第一篇帖子'</span> &#125;)</span><br><span class="line">      <span class="keyword">const</span> post2 = <span class="keyword">await</span> Post.findOne(&#123; title: <span class="string">'第二篇帖子'</span> &#125;)</span><br><span class="line">      post1.category = cat1._id</span><br><span class="line">      post2.category = cat1</span><br><span class="line">      <span class="keyword">await</span> post1.save()</span><br><span class="line">      <span class="keyword">await</span> post2.save()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//关联查询</span></span><br><span class="line"><span class="keyword">const</span> posts=<span class="keyword">await</span> Post.find().populate(<span class="string">'category'</span>)<span class="comment">//得到一个对象</span></span><br></pre></td></tr></table></figure><p>实际上，一篇文章对应多个分类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Post=mongoose.model(<span class="string">'Post'</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">title:&#123;<span class="keyword">type</span>:<span class="built_in">String</span>&#125;,</span><br><span class="line">body:&#123;<span class="keyword">type</span>:<span class="built_in">String</span>&#125;,</span><br><span class="line">categories:[&#123;<span class="keyword">type</span>:mongoose.SchemaTypes.objectId,ref:<span class="string">'Category'</span>&#125;]</span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">const</span> cat2=Category.findOne(&#123;name:<span class="string">'vuejs'</span>&#125;)</span><br><span class="line"> post1.categories = [cat1,cat2]</span><br><span class="line"> post2.categories=[cat2]</span><br><span class="line"><span class="keyword">const</span> posts=<span class="keyword">await</span> Post.find().populate(<span class="string">'categories'</span>)</span><br></pre></td></tr></table></figure><p>根据分类调出对应文章</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CategorySchema = <span class="keyword">new</span> mongoose.Schema(</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        toJSON: &#123; <span class="attr">virtuals</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    CategorySchema.virtual(<span class="string">'posts'</span>, &#123;</span><br><span class="line">      ref: <span class="string">'Posts'</span>,</span><br><span class="line">      localField: <span class="string">'_id'</span>, <span class="comment">//本地键，在分类里用本地键去关联</span></span><br><span class="line">      foreignField: <span class="string">'categories'</span>, <span class="comment">//外键，posts里被关联的键</span></span><br><span class="line">      justOne: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> cats = <span class="keyword">await</span> Category.find().populate(<span class="string">'posts'</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(cats)) <span class="comment">//默认是不显示虚拟字段的，设置两处1.Schema2.stringify处理，第二种方法是设置好1后再上面的populate后面加上.lean()表示输出纯粹的json数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引入mongoose&quot;&gt;&lt;a href=&quot;#引入mongoose&quot; class=&quot;headerlink&quot; title=&quot;引入mongoose&quot;&gt;&lt;/a&gt;引入mongoose&lt;/h2&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue插槽</title>
    <link href="http://yoursite.com/2019/10/22/vue%E6%8F%92%E6%A7%BD/"/>
    <id>http://yoursite.com/2019/10/22/vue插槽/</id>
    <published>2019-10-22T13:05:06.266Z</published>
    <updated>2019-10-23T08:00:31.609Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: 匿名插槽、具名插槽、作用域插槽</span><br><span class="line">date: 2019<span class="string">-10</span><span class="string">-20</span> 17:13:45</span><br><span class="line"><span class="keyword">tags:</span> vue插槽</span><br><span class="line">categories:</span><br><span class="line">  - vue</span><br><span class="line">  - vue基础</span><br></pre></td></tr></table></figure><p>匿名插槽</p><p>具名插槽</p><p>作用域插槽</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>BFC与折叠</title>
    <link href="http://yoursite.com/2019/10/20/BFC%E4%B8%8E%E6%8A%98%E5%8F%A0/"/>
    <id>http://yoursite.com/2019/10/20/BFC与折叠/</id>
    <published>2019-10-20T15:41:08.483Z</published>
    <updated>2019-10-20T15:57:36.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>BFC（Block Formatting context)块级格式化上下文，是CSS2.1规范的一个概念</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>BFC布局规则：</p><ul><li>内部的Box会在垂直方向，一个接一个地放置。</li><li>BFC的区域不会与float box重叠（注意：指的是BFC内部）。</li><li>BFC就是页面上的一个隔离的独立容器，容器内子元素不会影响到外面的元素，反之亦然。</li><li>计算BFC的高度时，浮动元素也参与计算。</li></ul><p>触发条件：</p><p>根元素</p><ul><li>float属性不为none</li><li>position为absolute或fixed</li><li>display为inline-block,table-cell,table-caption,flex,inline-flex</li><li>overflow不为visible</li></ul><h2 id="BFC与margin折叠"><a href="#BFC与margin折叠" class="headerlink" title="BFC与margin折叠"></a>BFC与margin折叠</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BFC&quot;&gt;&lt;a href=&quot;#BFC&quot; class=&quot;headerlink&quot; title=&quot;BFC&quot;&gt;&lt;/a&gt;BFC&lt;/h2&gt;&lt;p&gt;BFC（Block Formatting context)块级格式化上下文，是CSS2.1规范的一个概念&lt;/p&gt;
&lt;h2 id=&quot;&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>js数据类型转换(二)</title>
    <link href="http://yoursite.com/2019/10/20/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A22/"/>
    <id>http://yoursite.com/2019/10/20/js数据类型转换2/</id>
    <published>2019-10-20T09:13:45.000Z</published>
    <updated>2019-10-20T15:43:19.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6构造数组"><a href="#ES6构造数组" class="headerlink" title="ES6构造数组"></a>ES6构造数组</h2><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a><strong>Array.of</strong></h3><p>Array.of( )方法总会创建一个包含所有传入参数的数组，而不管参数的数量与类型，比Array()来创建数组要好，因为当使用单个数值参数来调用 Array 构造器时，数组的长度属性会被设置为该参数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor">Array(3)</span> <span class="comment">//[empty x 3] 一个length为3的空数组 [, , ,]</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Array</span>.</span></span><span class="keyword">of</span>(&#123;name:<span class="string">"zhang"</span>&#125;,<span class="number">1</span>,<span class="literal">[<span class="number">1</span>,<span class="number">2</span>]</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="对象转数组"><a href="#对象转数组" class="headerlink" title="对象转数组"></a>对象转数组</h2><h3 id="伪数组转数组"><a href="#伪数组转数组" class="headerlink" title="伪数组转数组"></a>伪数组转数组</h3><h4 id="Array-from-obj"><a href="#Array-from-obj" class="headerlink" title="Array.from(obj)"></a>Array.from(obj)</h4><p>将一个类数组对象或可遍历对象(iterable)转换成一个真正的数组(不管有无iterator接口)</p><blockquote><p>注：</p><p>1.object中必须有length属性，用于指定数组长度，如果没有length，转换后的是一个空数组</p><p>2.object属性名必须是数值型或字符串类型的数字</p><p>3.以上两点就是伪数组的定义</p></blockquote><h4 id="slice-call-obj-Array-prototype-slice-call-obj"><a href="#slice-call-obj-Array-prototype-slice-call-obj" class="headerlink" title="[].slice.call(obj)/Array.prototype.slice.call(obj)"></a>[].slice.call(obj)/Array.prototype.slice.call(obj)</h4><p>同上，伪数组和可遍历的对象（iterable）可以转换成真数组</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">const arrayLike = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">const <span class="keyword">array</span> = <span class="keyword">Array</span>.<span class="keyword">from</span>(arratLike) // [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">let a= [].<span class="keyword">slice</span>.<span class="keyword">call</span>(arrayLike) //[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">const obj = &#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'age'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'hobby'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">let b= [].<span class="keyword">slice</span>.<span class="keyword">call</span>(obj)//[]</span><br><span class="line">console.log([].<span class="keyword">slice</span>.<span class="keyword">call</span>(&#123;<span class="type">name</span>: <span class="string">'obj'</span>&#125;)); // []</span><br><span class="line">console.log([].<span class="keyword">slice</span>.<span class="keyword">call</span>(&#123;<span class="number">0</span>: <span class="string">'zero'</span>, <span class="number">1</span>: <span class="string">'one'</span>&#125;)); // []</span><br><span class="line">console.log([].<span class="keyword">slice</span>.<span class="keyword">call</span>(<span class="string">'123'</span>))//[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Array</span>.<span class="keyword">from</span>()可接受第二个参数，作用类似于数组的map方法，对每个元素进行处理，并放入返回的数组中。</span><br><span class="line">const spans = document.querySelectorAll(<span class="string">'span'</span>); //nodelist是类似数组的对象</span><br><span class="line">const <span class="keyword">array</span> = <span class="keyword">Array</span>.<span class="keyword">from</span>(spans, s =&gt; s.textContent);</span><br><span class="line"></span><br><span class="line">函数实参（arguments)的转化</span><br><span class="line"><span class="keyword">function</span> fn() &#123;</span><br><span class="line"></span><br><span class="line">var <span class="keyword">temp</span> = [].<span class="keyword">slice</span>.<span class="keyword">call</span>(arguments);</span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">temp</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,"a","se");//[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, "a", "se"]</span><br></pre></td></tr></table></figure><h3 id="可遍历对象转数组（部署了iterator接口）"><a href="#可遍历对象转数组（部署了iterator接口）" class="headerlink" title="可遍历对象转数组（部署了iterator接口）"></a>可遍历对象转数组（部署了iterator接口）</h3><p>可遍历对象：具备了iterator接口的数据结构（伪数组中只有string、nodelist、arguments具有iterator接口）</p><ul><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>函数的arguments对象</li><li>NodeList对象</li><li>TypedArray</li></ul><h4 id="Array-from-obj-1"><a href="#Array-from-obj-1" class="headerlink" title="Array.from(obj)"></a>Array.from(obj)</h4><h4 id="slice-call-obj-Array-prototype-slice-call-obj-1"><a href="#slice-call-obj-Array-prototype-slice-call-obj-1" class="headerlink" title="[].slice.call(obj)/Array.prototype.slice.call(obj)"></a>[].slice.call(obj)/Array.prototype.slice.call(obj)</h4><h4 id="扩展运算符（…）"><a href="#扩展运算符（…）" class="headerlink" title="扩展运算符（…）"></a>扩展运算符（…）</h4><p>（(…)背后调用的是遍历器接口，所以任何有iterator的对象都可以用(…)转化为真正的数组）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[...'hello'] //["h", "e", "l", "l", "o"]</span><br><span class="line"></span><br><span class="line">//扩展运算符用于赋值时，只能放在最后一位</span><br><span class="line">const [first, ...middle, last] = [1, 2, 3, 4, 5] //报错</span><br></pre></td></tr></table></figure><h3 id="其他方法（Object方法）"><a href="#其他方法（Object方法）" class="headerlink" title="其他方法（Object方法）"></a>其他方法（Object方法）</h3><blockquote><p>for…in循环的顺序</p><p><strong>先遍历出整数属性（integer properties，按照升序），然后其他属性按照创建时候的顺序遍历出来</strong>。</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> codes = &#123;</span><br><span class="line"><span class="string">"49"</span>: <span class="string">"Germany"</span>,</span><br><span class="line"><span class="string">"41"</span>: <span class="string">"Switzerland"</span>,</span><br><span class="line"><span class="string">"44"</span>: <span class="string">"Great Britain"</span>,</span><br><span class="line"><span class="string">"1"</span>: <span class="string">"USA"</span></span><br><span class="line">&#125;;</span><br><span class="line">for(<span class="keyword">let</span> <span class="keyword">code</span> <span class="keyword">in</span> codes) &#123;</span><br><span class="line">alert(<span class="keyword">code</span>); <span class="comment">// 1, 41, 44, 49</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Object-keys-obj"><a href="#Object-keys-obj" class="headerlink" title="Object.keys(obj)"></a>Object.keys(obj)</h4><p>返回一个对象的自身（不包括原型链上的）可枚举属性的属性名组成的数组，属性名的排列顺序和for…in相同</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> obj = &#123; foo: <span class="string">"bar"</span>, baz: <span class="number">42</span> &#125;,</span><br><span class="line"><span class="built_in">keys</span> = Object.<span class="built_in">keys</span>(obj);</span><br><span class="line">console.log(<span class="built_in">keys</span>);</span><br><span class="line"><span class="comment">// ["foo","baz"]</span></span><br></pre></td></tr></table></figure><h4 id="Object-getOwnPropertyNames-obj"><a href="#Object-getOwnPropertyNames-obj" class="headerlink" title="Object.getOwnPropertyNames(obj)"></a>Object.getOwnPropertyNames(obj)</h4><p>返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。属性名的排列顺序和for…in相同</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  x : <span class="number">1</span>,</span><br><span class="line">  y : <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">Object</span>.defineProperty(obj,<span class="string">'z'</span>,&#123;</span><br><span class="line">  enumerable : <span class="keyword">false</span></span><br><span class="line">&#125;)</span><br><span class="line">console.log(<span class="keyword">Object</span>.getOwnPropertyNames(obj))  // ["x", "y", "z"] 包含不可枚举属性 。</span><br><span class="line">console.log(<span class="keyword">Object</span>.keys(obj))                 // ["x", "y"]只包含可枚举属性 。</span><br></pre></td></tr></table></figure><h4 id="Object-values-obj"><a href="#Object-values-obj" class="headerlink" title="Object.values(obj)"></a>Object.values(obj)</h4><p>返回一个对象的自身可枚举属性值组成数组（会过滤属性名为Symbol值的属性值），属性值的排列顺序和for…in相同</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var an_obj = &#123; <span class="number">100</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">7</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line">console.log(<span class="keyword">Object</span>.<span class="keyword">values</span>(an_obj)); // [<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>]</span><br></pre></td></tr></table></figure><h4 id="Object-entries-obj"><a href="#Object-entries-obj" class="headerlink" title="Object.entries(obj)"></a>Object.entries(obj)</h4><p>返回一个对象的自身可枚举属性的键值对数组，排列与使用 for…in 循环遍历该对象时返回的顺序一致</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const simuArray = &#123; <span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line">console.log(<span class="symbol">Object</span>.entries(simuArray)); // [ [<span class="string">'0'</span>, <span class="string">'a'</span>], [<span class="string">'1'</span>, <span class="string">'b'</span>], [<span class="string">'2'</span>, <span class="string">'c'</span>] ]</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>entries搭配Map获取属性的个数，搭配forEach和解构，获取键值对</span><br><span class="line">var object=&#123;a:<span class="number">11</span>,b:<span class="number">22</span>,c:<span class="keyword">function</span><span class="literal">()</span>&#123;&#125;&#125;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>entries(object)<span class="comment">//=&gt;[['a',11],['b',22],['c','function()&#123;&#125;']]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="constructor">Map(Object.<span class="params">entries</span>(<span class="params">object</span>)</span>).size</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>entries(object).for<span class="constructor">Each([<span class="params">key</span>,<span class="params">value</span>]=&gt;<span class="params">console</span>.<span class="params">log</span>(`$&#123;<span class="params">key</span>&#125; $&#123;<span class="params">value</span>&#125;`)</span>)</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="字符串转对象，对象转字符串"><a href="#字符串转对象，对象转字符串" class="headerlink" title="字符串转对象，对象转字符串"></a>字符串转对象，对象转字符串</h2><p>JSON.stringify() 对象转字符串</p><p>JSON.parse() 字符串转对象</p><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5><h2 id="字符串转数组"><a href="#字符串转数组" class="headerlink" title="字符串转数组"></a>字符串转数组</h2><p>split()、map()</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//借用数组的<span class="built_in">map</span>方法</span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span> = <span class="string">"Chuloo"</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">map</span> = Array.prototype.<span class="built_in">map</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">newName</span> = <span class="built_in">map</span>.call(name, <span class="attr">eachLetter</span> =&gt; &#123;</span><br><span class="line">return `$&#123;eachLetter&#125;a`</span><br><span class="line">&#125;)</span><br><span class="line">console.log(newName)//[<span class="string">"Ca"</span>, <span class="string">"ha"</span>, <span class="string">"ua"</span>, <span class="string">"la"</span>, <span class="string">"oa"</span>, <span class="string">"oa"</span>]</span><br></pre></td></tr></table></figure><blockquote><p>通过“借用”数组的方法可以很方便的处理字符串。可以“借用”数组的非变更方法，但不能“借用”数组的可变更方法。</p><p>非变更方法：不改变原数组，并返回一个新数组</p></blockquote><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//借用数组join方法还可以实现字符串拼接</span></span><br><span class="line">let <span class="keyword">new</span><span class="type">Name2</span> = <span class="keyword">Array</span>.prototype.join.call(name,<span class="string">"-"</span>)</span><br><span class="line">console.log(<span class="keyword">new</span><span class="type">Name2</span>)<span class="comment">//C-h-u-l-o-o</span></span><br></pre></td></tr></table></figure><h3 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a, b;</span><br><span class="line">a = new Array(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">b = a.join(<span class="string">"-"</span>);</span><br><span class="line">console.log(b)<span class="comment">//0-1-2-3-4-5</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ES6构造数组&quot;&gt;&lt;a href=&quot;#ES6构造数组&quot; class=&quot;headerlink&quot; title=&quot;ES6构造数组&quot;&gt;&lt;/a&gt;ES6构造数组&lt;/h2&gt;&lt;h3 id=&quot;Array-of&quot;&gt;&lt;a href=&quot;#Array-of&quot; class=&quot;headerlink&quot; title=&quot;Array.of&quot;&gt;&lt;/a&gt;&lt;strong&gt;Array.of&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Array.of( )方法总会创建一个包含所有传入参数的数组，而不管参数的数量与类型，比Array()来创建数组要好，因为当使用单个数值参数来调用 Array 构造器时，数组的长度属性会被设置为该参数&lt;/p&gt;
&lt;figure class=&quot;highlight reasonml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constructor&quot;&gt;Array(3)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//[empty x 3] 一个length为3的空数组 [, , ,]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;Array&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;(&amp;#123;name:&lt;span class=&quot;string&quot;&gt;&quot;zhang&quot;&lt;/span&gt;&amp;#125;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
      <category term="数据类型" scheme="http://yoursite.com/categories/js/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="js数据类型" scheme="http://yoursite.com/tags/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>portfolio</title>
    <link href="http://yoursite.com/2019/10/19/portfolio/"/>
    <id>http://yoursite.com/2019/10/19/portfolio/</id>
    <published>2019-10-19T02:25:34.029Z</published>
    <updated>2019-10-19T06:08:37.767Z</updated>
    
    <content type="html"><![CDATA[<p>SMTP 协议<br>SMTP(简单邮件传输协议)，邮件传送代理程序使用 SMTP 协议来发送电邮到接收者的邮件服务器。SMTP 协议只能用来发送邮件，不能用来接收邮件，而大多数的邮件发送服务器都是使用 SMTP 协议。SMTP 协议的默认 TCP 端口号是 25。</p><a id="more"></a><p>STMP 环境调试<br>上面说了是使用 SMTP 协议发送的邮件，所以需要先查看你的发件人邮箱是否有开启 SMTP 协议，如没有，则需要开启，我测试使用的是 qq.com 的邮箱作为发信人邮箱，在设置中开启 SMTP 协议如下图所示。</p><p>检查开发环境是否存在 smtplib<br>python 之所以这么受欢迎，一大特点是因为它拥有很多模块，编程就好像玩乐高积木一样。好了废话不多说，我们先检查 python 是否安装了这个模块,进入 python 的交互模式，执行 improt smtplib,如下报错，证明环境中不存在此模块，需要额外安装。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SMTP 协议&lt;br&gt;SMTP(简单邮件传输协议)，邮件传送代理程序使用 SMTP 协议来发送电邮到接收者的邮件服务器。SMTP 协议只能用来发送邮件，不能用来接收邮件，而大多数的邮件发送服务器都是使用 SMTP 协议。SMTP 协议的默认 TCP 端口号是 25。&lt;/p&gt;
    
    </summary>
    
    
      <category term="xxx" scheme="http://yoursite.com/categories/xxx/"/>
    
    
      <category term="tag1" scheme="http://yoursite.com/tags/tag1/"/>
    
      <category term="tag2" scheme="http://yoursite.com/tags/tag2/"/>
    
  </entry>
  
  <entry>
    <title>原型和原型链</title>
    <link href="http://yoursite.com/2019/07/30/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://yoursite.com/2019/07/30/原型和原型链/</id>
    <published>2019-07-30T11:10:08.000Z</published>
    <updated>2019-10-20T15:23:21.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h2><a id="more"></a><p>任何对象在创建时都会具有<code>__proto__</code>属性，它指向构造该对象的构造函数的原型对象</p><p>实例化一个 String 对象 并输出</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-cb6758165bcf9dd1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.jpg"></p><p>可以看到 str 有 0、1、length、<code>__proto__</code>四个属性，点开<code>__proto__</code></p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-d3eb0936b087a22e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><code>str.__proto__</code>上存在着很多方法，所有 String 实例都可以共享这上面的属性和方法</p><h2 id="prototype-与-constructor"><a href="#prototype-与-constructor" class="headerlink" title="prototype 与 constructor"></a>prototype 与 constructor</h2><p>任何构造函数在创建时都会具有 prototype 属性，指向当前构造函数的原型对象，在默认情况下，所有的原型对象都会自动获得一个 constructor 属性，该属性指回 prototype 属性所在的构造函数,</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-7d0dc284e0215902.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>大多数情况下可以把<code>__proto__</code>理解为构造器的原型即<code>Object.__proto__===constructor.prototype</code></p><p>以下是一种特殊情况</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-da1e4fc2dbfbb3ce.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>js 里一切都可以被当做对象，任何对象都会具有<code>__proto__</code>属性。而 js 引擎在读取实例对象的属性时，如果存在普通属性中，就直接使用，如果找不到，就会查找与对象关联的原型中的属性，一直找到顶层（Object.prototype）。原型链上的对象靠<code>__proto__</code>属性连在一起形成了一条链，称为原型链。</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-8192f9d97f0a0ae1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原型链完整结构图"></p><p>#</p><p>原型链中 Function 和 Object 之间的各种关系比较重要</p><p>首先记住对象祖先为 Object.prototype，函数祖先为 Function.prototype。</p><p>1.<code>Object.__proto__ === Function.prototype // true</code></p><p>JS 里 Function 既是构造函数也是对象。作为构造函数来看，任何函数都是 Function 构造出来的，Object 是是函数对象，是 Function 构造的，所以<code>Object.__proto__===Function.prototype</code>,</p><p>2.<code>Function.__proto__ === Function.prototype // true</code></p><p>作为函数对象来看，Function 是通过 Function 函数来创建，也就是自己创建自己</p><p>3.<code>Function.prototype.__proto__ === Object.prototype //true</code></p><p>Function.prototype 也是对象，继承于 Object.prototype</p><h2 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h2><p>hasOwnProperty()返回一个布尔值，判断对象是否包含特定的自身（非继承）属性。</p><p>用法：<code>object.hasOwnProperty(proName)</code>　参数必须是以字符串的形式</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;proto&quot;&gt;&lt;a href=&quot;#proto&quot; class=&quot;headerlink&quot; title=&quot;__proto__&quot;&gt;&lt;/a&gt;__proto__&lt;/h2&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
      <category term="原型链" scheme="http://yoursite.com/categories/js/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="原型链" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>js数据类型</title>
    <link href="http://yoursite.com/2019/07/23/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/07/23/js数据类型/</id>
    <published>2019-07-23T12:13:45.000Z</published>
    <updated>2019-10-20T15:22:21.253Z</updated>
    
    <content type="html"><![CDATA[<p>js 是一种弱类型语言，即创建变量时不需要进行类型声明，并可以随意更改某个变量的数据类型</p><a id="more"></a><h2 id="基本类型与引用类型"><a href="#基本类型与引用类型" class="headerlink" title="基本类型与引用类型"></a>基本类型与引用类型</h2><p>js 有六种基本数据类型：number、boolean、string、undefined、null、symbol（ES6 新增）和一种引用数据类型 object，其子类是 Array、Function</p><h2 id="值的存储"><a href="#值的存储" class="headerlink" title="值的存储"></a>值的存储</h2><p>基本数据类型的值存在栈中，是按值访问的，可以操作保存在变量中的实际的值。引用数据类型的值存在堆中，是按引用访问的。需要创建一个变量（存在栈中）保存指向对象的地址。所以操作对象实际上是通过变量操作保存在变量中的对象的引用。（因为 js 不允许直接访问内存中的位置）。</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-42b0107a56865977.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="值的复制"><a href="#值的复制" class="headerlink" title="值的复制"></a>值的复制</h2><p>基本数据类型：把一个变量复制给另一个变量时，会在栈中创建一个新值，然后把值赋给新变量，复制之后的两个变量是完全独立的两个变量上,互不干涉。</p><p>引用数据类型：复制的是存在栈中的地址，两个不同的变量指向的对象是同一个，改变一个，另一个也会受到影响。</p><h2 id="Number（数值类型）"><a href="#Number（数值类型）" class="headerlink" title="Number（数值类型）"></a>Number（数值类型）</h2><p>js 采用的是 IEEE 754 定义的 64 位双精度浮点型来表示数字，用这种格式进行浮点数的运算会有问题，比如 0.1+0.2 不等于 0.3</p><p>Number 类型包括整数和浮点数。浮点数数值必须包含一个小数点，且小数点后至少有一位数字）。</p><h3 id="不同进制的表示方法"><a href="#不同进制的表示方法" class="headerlink" title="不同进制的表示方法"></a>不同进制的表示方法</h3><p>二进制（0b 开头），八进制（0 开头），十进制，十六进制（0x 开头）</p><ul><li>在 ECMAScript 5 严格模式下禁止使用八进制语法，会被视为十进制</li><li>在 ECMAScript 6 中使用八进制数字是需要给一个数字添加前缀”0o”</li></ul><p>八进制表示错误时会忽略前缀 0 转为 10 进制。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">num</span> = <span class="number">093</span>//八进制表示错误，前缀<span class="number">0</span>被忽略，解析为<span class="number">93</span></span><br><span class="line"><span class="built_in">var</span> <span class="built_in">num</span>=<span class="number">0b2</span>//报错</span><br></pre></td></tr></table></figure><h3 id="不同进制的转换"><a href="#不同进制的转换" class="headerlink" title="不同进制的转换"></a>不同进制的转换</h3><p>主要用到两个方法 toString()、parseInt()</p><p>toString(radix)：将 number 转化为指定进制的 string，默认十进制<br>parseInt（string，radix）radix 表示被解析的值的进制，返回对应的十进制数</p><ul><li>不写第二个参数默认十进制</li><li>如果字符串头部有空格，空格会被自动去除。</li><li>转换是一个个字符依次转换，在遇到不能解析的字符时就返回已经解析的部分，如果第一个字符就不能解析，就直接返回 NaN。</li><li>第一个参数为非字符串，会先调用该参数的 toString()方法转换为字符串</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>);<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'11'</span>,<span class="number">2</span>)<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'12'</span>,<span class="number">8</span>)<span class="comment">//10 8+2=10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'15'</span>,<span class="number">4</span>)<span class="comment">//1 4进制的错误表示，5不能解析，只返回1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">' 21'</span>) <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'015'</span>) <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">015</span>)<span class="comment">//13,先调用toString()，以0开头的解析为8进制数，转为十进制'13'</span></span><br></pre></td></tr></table></figure><h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><ul><li>任何涉及 NaN 的操作，都会返回 NaN,</li><li>NaN 与任何值都不相等，包括 NaN 本身。</li><li>可以通过 isNaN()方法来判断某个数值是否是 NaN 这个特殊的数。</li></ul><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><p>Boolean 类型只有两个值：true、false。<br>true 不一定就是 1，false 也不一定就是 0。</p><p>不同类型的数据对应的 boolean 值<br>| 数据类型 | 转换为 true 的值 | 转换为 false 的值 |<br>| ——— | ——————– | ————— |<br>| Boolean | true | false |<br>| String | 非空字符串 | “”（空字符串） |<br>| Number | 非零值（包括无穷大） | 0 和 NaN |<br>| Object | 任何对象 | null |<br>| Undefined | | Undefined |</p><h2 id="Null-与-Undefined"><a href="#Null-与-Undefined" class="headerlink" title="Null 与 Undefined"></a>Null 与 Undefined</h2><p>null 值表示一个空对象指针。undefined 表示变量尚未赋值<br>一般变量声明后没有准备赋值，不需要手动赋值 undefined,因为编译器会自动为其赋这个值，而如果定义的变量准备用来保存对象，那么要手动将该变量初始化为 null</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="literal">null</span>);<span class="regexp">//</span><span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> === <span class="literal">null</span>);<span class="regexp">//</span><span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h3><p>用来确定一个值到底是什么类型，返回一个用来表示表达式的数据类型的字符串</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typeof</span> fn<span class="comment">//function*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">typeof</span> arr<span class="comment">//object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> arr<span class="comment">//object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">//'object'</span></span><br><span class="line"><span class="keyword">typeof</span> fn<span class="comment">//'function'</span></span><br></pre></td></tr></table></figure><p>在使用 typeof 运算符判断对象的类型会产生问题，无论什么类型的对象，它都返回 “object”（除了 function）。这就需要用到 instanceof 运算符。</p><p>Instanceof 用于检测引用类型，检测某个对象是不是另一个对象的实例。</p><p>用法： object instanceof constructor</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Object</span><span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>##</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js 是一种弱类型语言，即创建变量时不需要进行类型声明，并可以随意更改某个变量的数据类型&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
      <category term="数据类型" scheme="http://yoursite.com/categories/js/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="js数据类型" scheme="http://yoursite.com/tags/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>js数据类型转换</title>
    <link href="http://yoursite.com/2019/07/20/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2019/07/20/js数据类型转换/</id>
    <published>2019-07-20T09:05:04.000Z</published>
    <updated>2019-10-20T11:49:25.141Z</updated>
    
    <content type="html"><![CDATA[<h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><a id="more"></a><p>使用<code>parseInt()</code> 、<code>parseFloat()</code> 、<code>Number()</code>、<code>Boolean()</code>、<code>String()</code>、<code>toString()</code>进行数据类型转换</p><p><strong>Number（）</strong></p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>undefined</td><td>NaN</td></tr><tr><td>null</td><td>0</td></tr><tr><td>布尔值</td><td>true 转换为 1，false 转为 0</td></tr><tr><td>数字</td><td>不转换，返回数字</td></tr><tr><td>字符串</td><td>字符串只包含数字（包括正负号），转为 10 进制数，字符串为空，转为 0，字符串中包含非数字字符，转为 NaN</td></tr></tbody></table><p><strong>String()</strong></p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>undefined</td><td>’undefined‘</td></tr><tr><td>null</td><td>’null‘</td></tr><tr><td>布尔值</td><td>转换为’true’ 或 ‘false’</td></tr><tr><td>数字</td><td>数字转换字符串，比如：1.765 转为’1.765’</td></tr><tr><td>字符串</td><td>无须转换</td></tr></tbody></table><p>PS:String() 能够将任何类型的值转换为字符串，不知道要转换的值是不是 null 或 undefined 的情况下，使用 String() ，而 toString()不能转化 undefined 和 null,因为两者没有该方法，会报错。，<br>引用类型中，数组的 toString()是把每个数组的元素以，分割的字符串的形式返回的，<br>其余的返回<code>[object type]</code>，其中 type 是对象的类型</p><p><strong>Boolean()</strong></p><p>5 个 falsy 值<br>除了这五个 falsy 值：’’（空字符串）、0、NaN、undefined、null 的，其他的值为 true</p><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><h3 id="四则运算符"><a href="#四则运算符" class="headerlink" title="四则运算符"></a>四则运算符</h3><h4 id="操作符"><a href="#操作符" class="headerlink" title="+操作符"></a>+操作符</h4><p>一元+：对非数值进行 Number() 转换；</p><p>二元+：</p><ul><li>+号两边只要其中一个是 String 类型，就将另一个也转为 String 进行拼接</li><li>两边都不是 String 类型，则对非数值进行 Number() 转化</li></ul><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>+ <span class="comment">'true'//’1true‘</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">1 </span>+ true//<span class="comment">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">1 </span>+ null//<span class="number">1</span> <span class="number">1</span>+<span class="number">0</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">1 </span>+ undefined//NaN <span class="number">1</span>+NaN=NaN</span><br></pre></td></tr></table></figure><p>其余操作符只要其中一个是 Number 类型，就将另一个也转为 Number 进行计算</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符会把其他数据类型转化为 Number 再比较关系</p><p>####&lt;、&gt;、&lt;=、&gt;=运算符</p><ul><li>有一边是字符串，对字符串使用 Number()转成数字后进行比较</li><li>两边都是字符串，比较两个字符串对应的 unicode 编码值</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>单字符比较</span><br><span class="line"><span class="string">'9'</span>&gt;<span class="string">'50'</span><span class="regexp">//</span>true  <span class="string">'9'</span>.charCodeAt(<span class="number">0</span>)=<span class="number">57</span>,<span class="string">'50'</span>.charCodeAt(<span class="number">0</span>)=<span class="number">53</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>多字符比较</span><br><span class="line"><span class="string">'abc'</span>&gt;<span class="string">'b'</span><span class="regexp">//</span>false 从左到右依次比较，先比较<span class="string">'a'</span>和<span class="string">'b'</span> <span class="string">'a'</span>.charCodeAt(<span class="number">0</span>)=<span class="number">97</span>,<span class="string">'b'</span>.charCodeAt(<span class="number">0</span>)=<span class="number">98</span></span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="== 运算符"></a>== 运算符</h4><p>比较相等性之前，不能将 null 和 undefined 转换成其他任何值。就是 undefined 和 null 与其他数在进行相等判断时不进行类型转换。null == undefined //true</p><p>类型相同时，没有类型转换，注意 NaN 不与任何值相等，包括自身。NaN !== NaN。</p><p>不同数据类型的转换按下图方式进行转换</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-81ad9114391f476f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不同数据类型的转换步骤"></p><h5 id="对象转换为基本类型"><a href="#对象转换为基本类型" class="headerlink" title="对象转换为基本类型"></a>对象转换为基本类型</h5><ul><li>先查找对象的<code>valueOf</code>方法，（Date 对象是先查找<code>toString</code>）如果有且返回基本类型值，则使用该值</li><li>如果没有就使用 toString 方法的返回值（如果存在）来进行强制类型转换</li></ul><p>一些例子：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[]==[]//<span class="literal">false</span>,比较的是内存中的地址</span><br><span class="line">[] == ![]//<span class="literal">true</span>,根据运算符优先级，！优先级大于==，先执行！[],“!” 为逻辑非，在操作非布尔值类型的数据时，会将该数据类型先转换为布尔值后再取反,而Boolean([])返回<span class="literal">true</span>,所以表达式相当于[]==<span class="literal">false</span>，<span class="literal">false</span>转数值为<span class="number">0</span>，[]先调用valueOf方法，返回this,不是原始值，继续调用toString方法， [].toString() = <span class="string">''</span>。<span class="string">''</span>调用<span class="built_in">Number</span>方法，转为数字<span class="number">0</span>。<span class="number">0</span>==<span class="number">0</span>，返回<span class="literal">true</span></span><br><span class="line">&#123;&#125;=!&#123;&#125;//<span class="literal">false</span>,左边 (&#123;&#125;.toString())返回<span class="string">'[Object Object]'</span>,调用<span class="built_in">Number</span>方法,返回NaN</span><br><span class="line">[<span class="literal">null</span>] == <span class="number">0</span>//<span class="literal">true</span>,[<span class="literal">null</span>].toString() = <span class="string">''</span>, <span class="built_in">Number</span>(<span class="string">''</span>)=<span class="number">0</span></span><br><span class="line">[<span class="literal">null</span>] == <span class="literal">false</span>//<span class="literal">true</span></span><br><span class="line"><span class="literal">null</span> == <span class="number">0</span>//<span class="literal">false</span>, <span class="literal">null</span>不进行类型转换</span><br><span class="line">[undefined] == <span class="literal">false</span> //<span class="literal">true</span>，[undefined].toString() = <span class="string">''</span><span class="built_in">Number</span>(<span class="string">''</span>)=<span class="number">0</span></span><br><span class="line">[<span class="literal">null</span>]==[]//<span class="literal">false</span> 两个数组比较</span><br><span class="line">[undefined] == [] //<span class="literal">false</span>,两个数组比较，比较索引是否相同</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;强制类型转换&quot;&gt;&lt;a href=&quot;#强制类型转换&quot; class=&quot;headerlink&quot; title=&quot;强制类型转换&quot;&gt;&lt;/a&gt;强制类型转换&lt;/h2&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
      <category term="数据类型" scheme="http://yoursite.com/categories/js/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="类型转换" scheme="http://yoursite.com/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>css的几种布局方法</title>
    <link href="http://yoursite.com/2019/07/15/css%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B8%83%E5%B1%80%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/07/15/css的几种布局方法/</id>
    <published>2019-07-15T09:05:04.000Z</published>
    <updated>2019-10-20T09:10:28.172Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><ul><li>行内元素：text-align: center;</li><li>块级元素：设置宽度然后 margin:0 auto</li><li>多个块级元素：父元素设置 text-align: center;，对子元素设置 display: inline-block;或使用 flex 布局</li></ul><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><p><strong>行内元素</strong></p><p>单行：</p><ul><li>设置上下 pandding 相等</li><li>设置 line-height 和 height 相等</li></ul><p>多行：</p><ul><li>设置上下 pandding 相等</li><li>设置 display: table-cell; 和 vertical-align: middle</li><li>使用 flex 布局</li></ul><p><strong>块级元素：</strong></p><p>父元素相对定位</p><p>子元素定高，子元素绝对定位 top:50%;再负 margin-top 把子元素往移一半的高度</p><p>未知子元素高，子元素绝对定位 top: 50%; transform: translateY(-50%)</p><p>flex 布局，父元素 justify-content: center;</p><h2 id="两栏布局"><a href="#两栏布局" class="headerlink" title="两栏布局"></a>两栏布局</h2><h3 id="左列定宽，右列自适应"><a href="#左列定宽，右列自适应" class="headerlink" title="左列定宽，右列自适应"></a>左列定宽，右列自适应</h3><ol><li><strong>float + margin</strong></li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"left"</span>&gt;左列定宽&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"right"</span>&gt;右列自适应&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.float+overflow</strong></p><p>right 触发 bfc 实现自适应</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"left"</span>&gt;左列定宽&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"right"</span>&gt;右列自适应&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.flex</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"left"</span>&gt;左列定宽&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"right"</span>&gt;右列自适应&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h2><h3 id="两列定宽，中间自适应"><a href="#两列定宽，中间自适应" class="headerlink" title="两列定宽，中间自适应"></a>两列定宽，中间自适应</h3><p><strong>1.圣杯</strong></p><p>将外层包裹设置 padding，再设置左右列的 position 属性分别左右移动到空出的 padding 部分，使中间列文字不被遮挡。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"center"</span>&gt;中间自适应&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"left"</span>&gt;左列定宽&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"right"</span>&gt;右列定宽&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.双飞翼</strong></p><p>与圣杯类似，只是在中间多套了一个元素，利用内套 center 的 margin 与左右列隔开。与圣杯相比，少了相对定位、padding 属性的设置，更加简洁。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"center-box"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"center"</span>&gt;中间自适应&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"left"</span>&gt;左列定宽&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"right"</span>&gt;右列定宽&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#center-box</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#center</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">480px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span> <span class="number">0</span> <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.position</strong></p><p>左右两列脱离文档流，父元素高度不一定撑得起来，对下面盒子的排布有影响</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.flex</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"left"</span>&gt;左列定宽&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"center"</span>&gt;中间自适应&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"right"</span>&gt;右列定宽&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      垂直居中
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
      <category term="布局" scheme="http://yoursite.com/categories/css/%E5%B8%83%E5%B1%80/"/>
    
    
      <category term="css布局" scheme="http://yoursite.com/tags/css%E5%B8%83%E5%B1%80/"/>
    
      <category term="垂直居中" scheme="http://yoursite.com/tags/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    
      <category term="三栏布局" scheme="http://yoursite.com/tags/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/"/>
    
      <category term="两栏布局" scheme="http://yoursite.com/tags/%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>iframe、a、form、input 标签</title>
    <link href="http://yoursite.com/2019/07/10/iframe%E3%80%81a%E3%80%81form%E3%80%81iinput%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2019/07/10/iframe、a、form、iinput标签/</id>
    <published>2019-07-10T14:34:39.000Z</published>
    <updated>2019-10-20T09:14:08.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><h3 id="iframe-的定义与用法"><a href="#iframe-的定义与用法" class="headerlink" title="iframe 的定义与用法"></a>iframe 的定义与用法</h3><ul><li>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。<a id="more"></a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14239471-8feda849ee3b16c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>iframe 的 name 属性可以与 a 标签、form 标签的 target 属性值结合使用</p><p>示例</p><p>点击京东链接让京东的页面在 name 为 jd 的 iframe 中打开</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe <span class="attribute">name</span>=<span class="string">"jd"</span> <span class="attribute">frameborder</span>=<span class="string">"0"</span>&gt;iframe&lt;/iframe&gt;</span><br><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"https://www.jd.com/"</span> <span class="attribute">target</span>=<span class="string">"jd"</span>&gt;京东&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14239471-aac4b7f957767c1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="a-标签"><a href="#a-标签" class="headerlink" title="a 标签"></a>a 标签</h2><h3 id="target"><a href="#target" class="headerlink" title="target"></a><strong>target</strong></h3><p>规定在何处打开链接文档。</p><ul><li><p>_self：当前页面打开。没有指定属性值时此为默认值</p></li><li><p>_blank:新窗口打开</p></li><li><p>_parent`:父级页面打开</p></li><li><p>_top:顶层页面打开</p></li><li><p>xxx:在 name 为 xxx 的窗口打开</p></li></ul><h3 id="download"><a href="#download" class="headerlink" title="download"></a><strong>download</strong></h3><p>浏览器决定要不要下载是由 http 响应决定的。如果 http 响应的 content-type 是：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-<span class="keyword">Type</span>: application/octet-stream</span><br></pre></td></tr></table></figure><p>浏览器就会以下载的形式接收这个响应。</p><p>通常是在 a 标签上加上 download 属性。</p><p>加上 downlaod 属性后，可完成对 href 属性链接文件的下载，但仅仅是限于同源文件，如果是非同源，download 属性会失效。<br>无 download 属性的时候，a 标签的默认行为是链接跳转进行预览，而针对浏览无法预览的文件，也可达到下载的效果。</p><p>download 还可指定下载的文件名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"xxx.jpg"</span> <span class="attribute">download</span>=<span class="string">"_x1_.jpg"</span>&gt;下载&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>后缀名一样还可以缺省：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"xxx.jpg"</span> <span class="attribute">download</span>=<span class="string">"_x1_"</span>&gt;下载&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="href"><a href="#href" class="headerlink" title="href"></a>href</h3><p>href 规定链接指向的页面的 URL。</p><p>href 是最重要的属性，如果 href 属性没有被指定链接，<a> 标签将不是一个链接。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刷新页面并回到顶部</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回到顶部不刷新页面。如果当前页面中需要滚动的话，那么用这种方式就可以直接回到顶部。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//qq.com"</span>&gt;</span>QQ<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无协议链接，表示和当前页面使用同一种协议打开，当浏览本地文件的时候，它会解析为 file:// 协议</p><p>href 路径的几种情况</p><ol><li><p>a 标签的 href 属性值如果是以 http 开头的，那么浏览器会马上启动 http 解释器去解释该网址，首先会在本地机器去找一个 hosts 文件， 如果在 hosts 文件上该域名没有对应的主机，那么浏览器就去到对应的 dns 服务器去寻找该域名对应的主机号。如果找到了对应的主机，那么该请求就会发给对应的主机。</p></li><li><p>如果 a 标签的 href 属性值没有以任何协议开头，那么浏览就会启动 file 协议解释器去解释该资源路径。</p></li><li><p>如果 a 标签的 href 属性值并不是以 http 开始，而且其他的一些协议，那么这时候浏览器就回去到我们本地的注册表中去查找是否有处理这种协议的应用程序，如果有，那么马上启动该应用程序处理该协议。</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#xxx"</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>锚点，跳转到当前页面中某标签的 id 为 xxx 的部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>伪协议，点击 a 标签执行一段 js 代码，但是此方法会直接将 js 方法暴露在浏览器的状态栏，</p><p>适当的方法有如下几种：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"javascript:void(0);"</span> ο<span class="attribute">nclick</span>=<span class="string">"js_method()"</span>&gt;x&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"javascript:;"</span> ο<span class="attribute">nclick</span>=<span class="string">"js_method()"</span>&gt;x&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"#"</span> ο<span class="attribute">nclick</span>=<span class="string">"js_method();return false;"</span>&gt;x&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>​</p><h2 id="form-标签"><a href="#form-标签" class="headerlink" title="form 标签"></a>form 标签</h2><p>收集用户数据，并决定以何种方式提交给服务器</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">action：指定提交的路径</span><br><span class="line"><span class="function"><span class="keyword">method</span>：表单数据提交的方式，<span class="title">get</span>/<span class="title">post</span>，默认是<span class="title">get</span>方式提交</span></span><br><span class="line"><span class="function"><span class="title">name</span>：定义表单名称</span></span><br><span class="line"><span class="function"><span class="title">id</span>： 唯一标识符</span></span><br><span class="line"><span class="function"><span class="title">target</span>:</span>规定在何处打开action指定的路径</span><br></pre></td></tr></table></figure><p>如果表单里没有提交按钮，就无法提交，即使按回车也无效（没有添加 js 的情况下）</p><p>如果表单里只有一个<code>&lt;button&gt;&lt;/button&gt;</code>那么 button 自动升级为 submit 按钮而 <code>&lt;input type=&quot;button&quot; value=&quot;button&quot;&gt;</code>或者<code>&lt;button type=&quot;button&quot;&gt;&lt;/button&gt;</code> 不会</p><h2 id="input-标签"><a href="#input-标签" class="headerlink" title="input 标签"></a>input 标签</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type：根据不同的<span class="built_in"> type </span>属性值，使得输入字段可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等等</span><br><span class="line">name:控件的名字，不设置name 不会影响功能实现，但作为提交给后台的字段，没有name则无法提交(不加name，提交时input的值就不会出现在请求里)</span><br><span class="line">value:提交给后台的值</span><br><span class="line">id:唯一标识符</span><br></pre></td></tr></table></figure><p>在写单选或多选时会在 input 前加上 lable 标签，使得点击 input 文字时能触发 input 控件</p><p>写法：input 设置 id 属性 label 设置 for=id，从而使文字与控件关联</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;label <span class="attribute">for</span>=<span class="string">"xxx"</span>&gt;点我&lt;/label&gt;</span><br><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"radio"</span> <span class="attribute">name</span>=<span class="string">"test"</span> <span class="attribute">id</span>=<span class="string">"xxx"</span>&gt;</span><br></pre></td></tr></table></figure><p>简化写法：用 lablel 嵌套 input（直接省略 id 属性，取消 for 属性绑定）</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">label</span>&gt;点我</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"radio"</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">label</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;iframe&quot;&gt;&lt;a href=&quot;#iframe&quot; class=&quot;headerlink&quot; title=&quot;iframe&quot;&gt;&lt;/a&gt;iframe&lt;/h2&gt;&lt;h3 id=&quot;iframe-的定义与用法&quot;&gt;&lt;a href=&quot;#iframe-的定义与用法&quot; class=&quot;headerlink&quot; title=&quot;iframe 的定义与用法&quot;&gt;&lt;/a&gt;iframe 的定义与用法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。
    
    </summary>
    
    
      <category term="html" scheme="http://yoursite.com/categories/html/"/>
    
    
      <category term="html标签" scheme="http://yoursite.com/tags/html%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>初见命令行</title>
    <link href="http://yoursite.com/2019/07/03/%E5%88%9D%E8%A7%81%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>http://yoursite.com/2019/07/03/初见命令行/</id>
    <published>2019-07-03T15:57:34.000Z</published>
    <updated>2019-10-20T09:03:47.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-ls-命令"><a href="#一-ls-命令" class="headerlink" title="(一)ls 命令"></a>(一)ls 命令</h2><h3 id="1-命令功能"><a href="#1-命令功能" class="headerlink" title="1.命令功能"></a>1.命令功能</h3><p>ls 命令用于打印当前文件夹的内容</p><a id="more"></a><h3 id="2-命令格式"><a href="#2-命令格式" class="headerlink" title="2.命令格式"></a>2.命令格式</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls <span class="string">[选项]</span> 目录名称</span><br></pre></td></tr></table></figure><p>在不添加任何选项时，ls 命令默认列出当前文件夹下非隐藏（以圆点“.”开头的文件和文件夹默认隐藏）的所有文件和文件夹</p><h3 id="3-常用参数"><a href="#3-常用参数" class="headerlink" title="3.常用参数"></a>3.常用参数</h3><p>-a 列出当前文件夹下所有的文件和文件夹，包括以 . 开头的隐藏文件。位于起首处的 .. 和 . 依次是指父文件夹和当前文件夹。**</p><p>-A 同-a，但不列出.和..</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-ce0dcfc49ae100da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>-l 列出当前文件夹下非隐藏文件和文件夹的详细信息</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-aa08e8a18cab677c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>-la/-al 列出当前文件夹下全部文件和文件夹的详细信息</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-b7cfe3dec431e215.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="（二）cat-命令"><a href="#（二）cat-命令" class="headerlink" title="（二）cat 命令"></a>（二）cat 命令</h2><h3 id="1-命令功能-1"><a href="#1-命令功能-1" class="headerlink" title="1.命令功能"></a>1.命令功能</h3><p>cat 命令用以将文件、标准输入内容打印至标准输出。常用于显示文件内容、创建文件、向文件中追加内容</p><h4 id="1-1-显示文件内容-cat-filename"><a href="#1-1-显示文件内容-cat-filename" class="headerlink" title="1.1 显示文件内容 :cat filename"></a><strong>1.1 显示文件内容</strong> :cat filename</h4><p><img src="https://upload-images.jianshu.io/upload_images/14239471-6120a716bd3607f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="1-2-创建新文件：cat-gt-filename"><a href="#1-2-创建新文件：cat-gt-filename" class="headerlink" title="1.2 创建新文件：cat &gt; filename"></a><strong>1.2 创建新文件</strong>：cat &gt; filename</h4><p>1、键入 cat &gt; filename.txt 后回车 2、录入文本内容； 3、键入回车； 4、在键盘上按下 Ctrl+D</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-b384bbabbd56a5e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="1-3-将几个文件合并为一个文件：cat-file1-file2-gt-file"><a href="#1-3-将几个文件合并为一个文件：cat-file1-file2-gt-file" class="headerlink" title="1.3 将几个文件合并为一个文件：cat file1 file2 &gt; file"></a>1.3 将几个文件合并为一个文件：cat file1 file2 &gt; file</h4><p><img src="https://upload-images.jianshu.io/upload_images/14239471-cf0967abebd2d5dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>注意:file 若已存在，此操作会把 file 里的内容清空</p><h3 id="2-命令格式-1"><a href="#2-命令格式-1" class="headerlink" title="2.命令格式"></a>2.命令格式</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="string">[选项]</span> <span class="string">[文件]</span></span><br></pre></td></tr></table></figure><h3 id="3-常用参数-1"><a href="#3-常用参数-1" class="headerlink" title="3.常用参数"></a>3.常用参数</h3><table><thead><tr><th align="left"><strong>-n 或 –number</strong></th><th><strong>由 1 开始对所有输出的行数编号。</strong></th></tr></thead><tbody><tr><td align="left"><strong>-b 或 –number-nonblank</strong></td><td><strong>和 -n 相似，只不过对于空白行不编号。</strong></td></tr><tr><td align="left"><strong>-s 或 –squeeze-blank</strong></td><td><strong>当遇到有连续两行以上的空白行，就代换为一行的空白行。</strong></td></tr><tr><td align="left"><strong>-v 或 –show-nonprinting</strong></td><td><strong>使用 ^ 和 M- 符号，除了 LFD 和 TAB 之外。</strong></td></tr><tr><td align="left"><strong>-E 或 –show-ends</strong></td><td><strong>在每行结束处显示 $</strong></td></tr><tr><td align="left"><strong>-T 或 –show-tabs</strong></td><td><strong>将 TAB 字符显示为 ^I</strong></td></tr><tr><td align="left"><strong>-A, –show-all</strong></td><td><strong>等价于 -vET</strong></td></tr><tr><td align="left"><strong>-e</strong></td><td><strong>等价于”-vE”选项</strong></td></tr><tr><td align="left"><strong>-t</strong></td><td><strong>等价于”-vT”选项</strong></td></tr></tbody></table><h2 id="（三）mv-命令"><a href="#（三）mv-命令" class="headerlink" title="（三）mv 命令"></a>（三）mv 命令</h2><h3 id="1-命令功能-2"><a href="#1-命令功能-2" class="headerlink" title="1.命令功能"></a>1.命令功能</h3><p>mv 命令用来移动文件或者将文件改名</p><h3 id="2-命令格式-2"><a href="#2-命令格式-2" class="headerlink" title="2.命令格式"></a>2.命令格式</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv <span class="string">[选项]</span> 源文件或目录 目标文件或目录</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令格式</th><th>运行结果</th></tr></thead><tbody><tr><td>mv 文件名 文件名</td><td>同级目录下，将源文件名改为目标文件名</td></tr><tr><td>mv 文件名 目录名</td><td>将文件移动到目标目录，若目标目录不存在则报错</td></tr><tr><td>mv 目录名 目录名</td><td>目标目录已存在，将源目录移动到目标目录（如果有冲突文件则直接覆盖，如果有冲突文件夹，则冲突部分无法移动）；目标目录不存在则改名</td></tr><tr><td>mv 目录名 文件名</td><td>出错</td></tr></tbody></table><h4 id="2-1-文件改名"><a href="#2-1-文件改名" class="headerlink" title="2.1 文件改名"></a><strong>2.1 文件改名</strong></h4><p><img src="https://upload-images.jianshu.io/upload_images/14239471-bbcf3dabb36aa448.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2-2文件移动到目标文件夹"><a href="#2-2文件移动到目标文件夹" class="headerlink" title="2.2文件移动到目标文件夹"></a><strong>2.2</strong>文件移动到目标文件夹</h4><p>test2 文件移动到当前目录下的 css 文件夹中</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-a4f7b2d6f29fac3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>如果移动到不存在的目录会报错</p><p>如果是 mv test2 /css,实际上是将 test2 移动到根目录下并更名为 css<br><img src="https://upload-images.jianshu.io/upload_images/14239471-08cb5ad671ab7143.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-6f56f286e2d5bf02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-93aa682a501f9cde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>移动到正确的位置并改名为 test2<br><img src="https://upload-images.jianshu.io/upload_images/14239471-595cf9580abf1ca9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="3-常用参数-2"><a href="#3-常用参数-2" class="headerlink" title="3.常用参数"></a>3.常用参数</h3><table><thead><tr><th><strong>-i</strong></th><th><strong>若存在同名文件，则向用户询问是否覆盖</strong></th></tr></thead><tbody><tr><td><strong>-f</strong></td><td><strong>覆盖已有文件时，不进行任何提示</strong></td></tr><tr><td><strong>-b</strong></td><td><strong>当文件存在时，覆盖前为其创建一个备份</strong></td></tr><tr><td><strong>-u</strong></td><td><strong>当源文件比目标文件新，或者目标文件不存在时，才执行移动此操作</strong></td></tr></tbody></table><h2 id="（四）touch-命令"><a href="#（四）touch-命令" class="headerlink" title="（四）touch 命令"></a><strong>（四）touch 命令</strong></h2><h3 id="1-命令功能-3"><a href="#1-命令功能-3" class="headerlink" title="1.命令功能"></a><strong>1.命令功能</strong></h3><p><strong>创建空文件，或者改变文件的时间戳属性</strong></p><h3 id="2-命令格式-3"><a href="#2-命令格式-3" class="headerlink" title="2.命令格式"></a><strong>2.命令格式</strong></h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="string">[选项]</span> 文件名或者目录名</span><br></pre></td></tr></table></figure><h3 id="3-常用参数-3"><a href="#3-常用参数-3" class="headerlink" title="3.常用参数"></a><strong>3.常用参数</strong></h3><table><thead><tr><th><strong>-a</strong></th><th><strong>只修改文件的 access(访问)时间.</strong></th></tr></thead><tbody><tr><td><strong>-c</strong>或–no-create</td><td><strong>仅修改文件的时间参数（3 个时间参数都改变），如果文件不存在，则不建立新文件</strong></td></tr><tr><td><strong>-d</strong></td><td><strong>使用指定的日期时间，而非现在的时间</strong></td></tr><tr><td><strong>-m</strong></td><td><strong>指修改 Modify(修改)时间,而不修改 access(访问)时间</strong></td></tr><tr><td><strong>-t</strong></td><td><strong>使用指定的时间值 time 作为指定文件 file 相应时间戳记的新值．此处的 time 规定为如下形式 的十进制数 ∶ [[CC]YY]MMDDhhmm[.SS]</strong></td></tr><tr><td><strong>-r 原文件 目标文件</strong></td><td><strong>将文件设置和参考文件的日期时间相同</strong></td></tr></tbody></table><p><img src="https://upload-images.jianshu.io/upload_images/14239471-1f5ca5f311a578da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>Acess time：即文件存取时间，或者理解为“最后一次读取时间”，如使用 touch、cat、more 等命令会修改此数值，但使用 ls，stat 查看不会改变。</p><p>Modify time：修改时间，这里是指文件内容最后一次修改时间。ls 命令默认显示就是这个时间。</p><p>Change time：改变时间，这里是指文件属性最后修改时间，如修改权限、名称、大小等。</p><p>touch 命令可以修改文件的访问时间和修改时间，但只要修改时间一改动，访问时间和改变时间都会改动</p><h4 id="关于-t-的时间书写格式"><a href="#关于-t-的时间书写格式" class="headerlink" title="关于-t 的时间书写格式**"></a>关于-t 的时间书写格式**</h4><p>CC 为年数中的前两位，即”世纪数”；YY 为年数的后两位，即某世纪中的年数．如果不给出 CC 的值，则 touch 将把年数 CCYY 限定在 1969–2068 之内．MM 为月数，DD 为天将把年数 CCYY 限定在 1969–2068 之内．MM 为月数，DD 为天数，hh 为小时数(几点)，mm 为分钟数，SS 为秒数．此处秒的设定范围是 0–61，这样可以处理闰秒．这些数字组成的时间是环境变量 TZ 指定的时区中的一个时间。由于系统的限制，早于 1970 年 1 月 1 日的时间是错误的。</p><h2 id="五-explainshell-com"><a href="#五-explainshell-com" class="headerlink" title="(五)explainshell.com"></a>(五)explainshell.com</h2><p>该网站可以将命令行的格式和用法列出来，只需要把命令行输入进去就可以得到相应的命令和参数的意思</p><p>例子：</p><p>搜索 mv，按回车</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-6b3a648b3fc9779a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>点击 mv</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-cb54e98431167515.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>进入新页面，列出了 mv 命令的详细用法</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-8d040b478d7f295c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-ls-命令&quot;&gt;&lt;a href=&quot;#一-ls-命令&quot; class=&quot;headerlink&quot; title=&quot;(一)ls 命令&quot;&gt;&lt;/a&gt;(一)ls 命令&lt;/h2&gt;&lt;h3 id=&quot;1-命令功能&quot;&gt;&lt;a href=&quot;#1-命令功能&quot; class=&quot;headerlink&quot; title=&quot;1.命令功能&quot;&gt;&lt;/a&gt;1.命令功能&lt;/h3&gt;&lt;p&gt;ls 命令用于打印当前文件夹的内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="命令行" scheme="http://yoursite.com/categories/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
    
      <category term="命令行常用命令" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>http请求响应与curl命令</title>
    <link href="http://yoursite.com/2019/07/03/http%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E4%B8%8Ecurl%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/07/03/http请求响应与curl命令/</id>
    <published>2019-07-03T15:21:33.000Z</published>
    <updated>2019-10-20T08:41:31.892Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="http-请求报文"><a href="#http-请求报文" class="headerlink" title="http 请求报文"></a>http 请求报文</h2><p><img src="https://upload-images.jianshu.io/upload_images/14239471-508b43cf263be2d5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>请求行：请求方法 请求的 url http 协议及版本。</li><li>请求头：一大堆的键值对。</li><li>空行指的是：当服务器在解析请求头的时候，如果遇到了空行，则表明，后面的内容是请求体。</li><li>请求体：数据部分(可以为空)。</li></ul><h2 id="http-响应报文"><a href="#http-响应报文" class="headerlink" title="http 响应报文"></a>http 响应报文</h2><p><img src="https://upload-images.jianshu.io/upload_images/14239471-736fc79bbddcac32.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>状态行：http 协议及版本 状态码 状态描述。</p><p>响应头：一大堆的键值对。</p><p>空行：当服务器在解析响应头的时候，如果遇到了空行，则表明，后面的内容是响应体。</p><p>响应体：数据部分（可以为空)。</p><p>PS:Content-Type 标注了请求体/响应体的数据格式</p><h2 id="http-方法"><a href="#http-方法" class="headerlink" title="http 方法"></a>http 方法</h2><p><code>GET</code>：获取资源</p><p><code>POST</code>：传输资源</p><p><code>put</code>：更新资源</p><p><code>PATCH</code>：更新部分资源</p><p><code>DELETE</code>：删除资源</p><p><code>HEAD</code>：获得报文首部</p><p><strong>GET 与 POST 的几点区别</strong></p><ol><li>浏览器在回退时，get 不会重新请求，但 post 会重新请求。</li><li>get 请求会被浏览器主动缓存，而 post 不会。</li><li>get 请求的参数，会保留在浏览器的历史记录里，而 post 不会。</li><li>get 请求在 url 中传递的参数有大小限制，基本是 2kb，不同的浏览器略有不同。</li><li>get 参数是直接暴露在 url 上的,而 post 是放在请求体中的。</li></ol><h2 id="http-状态码"><a href="#http-状态码" class="headerlink" title="http 状态码"></a>http 状态码</h2><p>1xx:提示信息-请求已接收，继续处理</p><p>2xx:成功-请求已被成功接收</p><p>3xx:重定向</p><p>4xx:客户端错误-请求有语法错误或无法实现</p><p>5xx:服务器错误</p><h2 id="用-Chrome-开发者工具查看-HTTP-请求内容"><a href="#用-Chrome-开发者工具查看-HTTP-请求内容" class="headerlink" title="用 Chrome 开发者工具查看 HTTP 请求内容"></a>用 Chrome 开发者工具查看 HTTP 请求内容</h2><p><strong>以百度为例看 get 请求</strong></p><ol><li><p>打开 Network</p></li><li><p>地址栏输入 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/14239471-c7ecbce71809dd42.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol start="3"><li>查看 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 的 request 部分</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/14239471-cc413179feea5d23.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol start="4"><li>点击 view source<br><img src="https://upload-images.jianshu.io/upload_images/14239471-ba291bff3a042682.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li></ol><p><strong>登录百度，看 post 请求</strong></p><ol><li>勾上 Preserve log,点击登录</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/14239471-e7eba79972939ddf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol start="2"><li>FormData 里可以看到请求体里的密码</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/14239471-b9ce363c4d1a2010.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="用-Chrome-开发者工具查看-HTTP-响应内容"><a href="#用-Chrome-开发者工具查看-HTTP-响应内容" class="headerlink" title="用 Chrome 开发者工具查看 HTTP 响应内容"></a>用 Chrome 开发者工具查看 HTTP 响应内容</h2><p><strong>依然以百度为例，查看 response 部分，点击 view source</strong><br><img src="https://upload-images.jianshu.io/upload_images/14239471-04f442ce14e78c64.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="curl-命令的使用"><a href="#curl-命令的使用" class="headerlink" title="curl 命令的使用"></a>curl 命令的使用</h2><h3 id="1-命令功能"><a href="#1-命令功能" class="headerlink" title="1.命令功能"></a>1.命令功能</h3><p>curl 命令是一个利用 URL 规则在命令行下工作的文件传输工具。它支持文件的上传和下载</p><h3 id="2-命令格式"><a href="#2-命令格式" class="headerlink" title="2.命令格式"></a>2.命令格式</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">[选项]</span> <span class="string">[URL]</span></span><br></pre></td></tr></table></figure><h3 id="3-常见使用方法"><a href="#3-常见使用方法" class="headerlink" title="3.常见使用方法"></a>3.常见使用方法</h3><h4 id="curl-url"><a href="#curl-url" class="headerlink" title="curl url"></a>curl url</h4><p>查看网页源码</p><p><img src="https://upload-images.jianshu.io/upload_images/14239471-f7a8a49dc6e1a4d6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="curl-X"><a href="#curl-X" class="headerlink" title="curl -X"></a>curl -X</h4><p>指定请求方式</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">curl -X post</span></span><br></pre></td></tr></table></figure><h4 id="curl-c"><a href="#curl-c" class="headerlink" title="curl -c"></a>curl -c</h4><p>保存 Cookie</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -c <span class="string">"保存cookie的文件名"</span> <span class="string">http:</span><span class="comment">//www.example.com</span></span><br></pre></td></tr></table></figure><h4 id="curl-b"><a href="#curl-b" class="headerlink" title="curl -b"></a>curl -b</h4><p>读取 cookie</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -<span class="selector-tag">b</span> <span class="string">"cookie字符串或文件名"</span> http:<span class="comment">//www.example.com</span></span><br></pre></td></tr></table></figure><h4 id="curl-d"><a href="#curl-d" class="headerlink" title="curl -d"></a>curl -d</h4><p>使用-d 发送带参数的请求，如果省略 -X，则默认为 POST 方式</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -d <span class="string">"userName=abc"</span> <span class="string">http:</span><span class="comment">//www.example.com/login</span></span><br></pre></td></tr></table></figure><h4 id="curl-H"><a href="#curl-H" class="headerlink" title="curl -H"></a>curl -H</h4><p>自定义 Header 头信息</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:text/html"</span> <span class="string">http:</span><span class="comment">//www.example.com</span></span><br></pre></td></tr></table></figure><h4 id="curl-v"><a href="#curl-v" class="headerlink" title="curl -v"></a>curl -v</h4><p>显示请求的信息 ，包括端口连接和 http 头。</p><h4 id="curl-i"><a href="#curl-i" class="headerlink" title="curl -i"></a>curl -i</h4><p>显示 http 头，连同网页代码。</p><h4 id="curl-I"><a href="#curl-I" class="headerlink" title="curl -I"></a>curl -I</h4><p>只显示 http 头。</p><p><strong>提交表单信息</strong></p><p>浏览器每次向服务器发送 url 时都会进行编码，然后服务器再进行解码。</p><p>所以用 curl 提交表单时，所传参数都必须进行编码</p><p>1.header 不需要加 urlencode，浏览器会自动编码</p><p>2.post 和 get 所传参数没有编码的话需要加 urlencode</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X <span class="keyword">POST</span> --data-urlencode <span class="string">"data=哈哈abc"</span> example.com/<span class="keyword">form</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      用开发者工具和curl查看http请求响应
    
    </summary>
    
    
      <category term="命令行" scheme="http://yoursite.com/categories/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
    
      <category term="curl命令" scheme="http://yoursite.com/tags/curl%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>
